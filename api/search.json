[{"id":"9575e4b650941f02c5b9a1d623012ff0","title":"MySql","content":"MySql创建，删除，查询数据库与表等基础语句(指令)创建数据库#演示数据库的操作\n#启动和关闭数据库\n1net START mysql\n\n1net STOP mysql\n\n#创建一个名为lby_db01的数据库。\n#使用指令创建数据库\n1CREATE DATABASE lby_db01\n\n#删除数据库\n1DROP DATABASE lby_db01\n\n#创建一个使用utf8字符集的lby_db02数据库\n1CREATE DATABASE lby_db02 CHARACTER SET utf8\n\n#创建一个使用utf8字符集，并带校对规则的lby_db03数据库\n1CREATE DATABASE lby_db03 CHARACTER SET utf8 COLLATE utf8_bin\n\n#校对规则 utf8_bin 区分大小写 默认utf8_general_ci 不区分大小写\n#下面是一条查询的sql，select 表示查询     *  表示所有字段      FROM表示从哪个表#WHERE 表示从哪个字段 \t\tNAME &#x3D; ‘tom’ 表示查询名字是tom\n1SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;\n\n查询数据库#查看当前数据库服务器中的所有数据库\n1SHOW DATABASES\n\n#查看前面创建的lby_db01数据库的定义信息\n1SHOW CREATE DATABASE lby_db01\n\n#在创建数据库，表的时候，为了规避关键字，可以使用反引号解决\n1CREATE DATABASE `create`\n\n#删除上面创建的create数据库\n1DROP DATABASE `create`\n\n备份恢复数据库#备份，要在Dos下执行mysqldump指令其实在mysql安装目录下\\bin#这个备份的文件，就是对应的sql语句\n1mysqldump -u root -p -B lby_db02 lby_db03 &gt; C:\\\\bak.sql\n\n1DROP DATABASE lby_db03;\n\n#恢复数据库(注意：进入Mysql命令行执行)\n1source C:\\\\bak.sql\n\n#第二个恢复方法，直接将bak.sql的内容放到查询编辑器中，执行就可以了\n#备份数据库的表\n1mysqldump -u root -p lby_db02 t1 t2 &gt;C:\\\\bak02.sql\n\n创建表#指令创建表\n123456CREATE TABLE `user` (\tid INT,\t`name` VARCHAR(255),\t`password` VARCHAR(255),\tbirthday DATE)\tCHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB;\n\n简单说明：utf8表示这个表的字符集，utf8_bin表示这个表的校对规则，innodb表示这个表的引擎\ncharacter set：指定表的字符集，若没有指定，则默认为所在数据库的字符集\ncollate：指定表的校对规则，若没有指定，则默认为所在数据库的校对规则\nengine：指定表的引擎\n练习：\n12345678910CREATE TABLE t15 (\tid INT,\t`name` CHAR(32),\tsex CHAR(32),\tbirthday DATE,\tentry_date DATETIME,\tjob CHAR(32),\tSalary DOUBLE,\tRESUME TEXT) CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;SELECT * FROM t15;\n\n– 添加一条\n12INSERT INTO t15 VALUES(100,&#x27;李白&#x27;,&#x27;2000-11-18&#x27;,&#x27;2018-11-18 11:11:11&#x27;,&#x27;写诗的&#x27;,10000,&#x27;皇上叫我写诗&#x27;,&#x27;&#x27;);\n\n修改表#添加列– ALTER TABLE tablename– ADD\t(column datatype [DEFAULT exper]–\t[, column datatype]…);– 员工表t15的基础上增加一个image列，char类型(要求加在resume后面)\n12ALTER TABLE t15ADD\timage CHAR(32) NOT NULL DEFAULT &#x27;&#x27; AFTER RESUME;\n\n1DESC employee\n\n – 显示表结构，可以查看表的所有列\n#修改列– 修改job列，使其长度为60\n12ALTER TABLE t15\tMODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27; &#x27;\n\n– 删除sec列\n12ALTER TABLE t15\tDROP sex\n\n– 表名改为employee\n1RENAME TABLE t15 TO employee\n\n– 修改表的字符集为utf8\n1ALTER TABLE employee CHARACTER SET utf8\n\n– 列名name修改为user_name\n1ALTER TABLE employee CHANGE NAME user_name VARCHAR(32) NOT NULL DEFAULT &#x27; &#x27;\n\n1SELECT * FROM employee;\n\n\n\n列类型常用数据类型\n整型#演示整数#说明：表的字符集，校验规则，存储引擎，使用默认#1.如果没有指定unsigned，则TINYINT就是有符号的(-128~127)，如果没有符号(0-255)#2.如果指定unsigned，则TINYINT就是无符号0-255\n1234CREATE TABLE t3 (\tid TINYINT);CREATE TABLE t4 (\tid TINYINT UNSIGNED);\n\n12345INSERT INTO t3 VALUES(128);#这是非常简单的添加语句，添加失败，超过tinyint范围，因为这是带符号的SELECT * FROM t3INSERT INTO t4 VALUES(255);#添加成功SELECT * FROM t4\n\nbit#演示bit类型使用#说明#1.bit(m) m在1-64#2.添加数据 范围 按照你给的位数来确定，比如m&#x3D;8表示一个字节 0~255#3.显示按照bit#4.查询时，仍然可以按照数来查询\n1234CREATE TABLE t5 (num BIT(8));INSERT INTO t5 VALUES(255);SELECT * FROM t5SELECT * FROM t5 WHERE num = 1;\n\n小数型#演示decimal类型，float，double使用（一般使用double或者decimal，因为其精度更高）#创建表\n1234CREATE TABLE t6 (\tnum1 FLOAT,\tnum2 DOUBLE,\tnum3 DECIMAL(30,20));\n\n#decimal(m,n)如果没有给m，n赋值，那么会默认m为10，n为0#添加数据\n1INSERT INTO t6 VALUES(88.12345678912345,88.12345678912345,88.12345678912345);\n\n1SELECT * FROM t6;\n\n#decimal可以存放很大的数\n1234CREATE TABLE t7 (\tnum DECIMAL(65));INSERT INTO t7 VALUES(899999999999999999999999999999999999999999999999999999999999999);SELECT * FROM t7;\n\n1234CREATE TABLE t8 (\tnum BIGINT UNSIGNED);INSERT INTO t8 VALUES(899999999999999999999999999999999999999999999999999999999999999);SELECT * FROM t8;\n\n\n字符串#演示字符串类型使用char varchar#注释的快捷键 shift+ctrl+c，取消注释 shift+ctrl+r– CHAR(size)– 固定长度字符串 最大255字符– VARCHAR(size)      0~65535(字节，而不是字符)– 可变长度字符串 最大65532字节   【utf8编码最大21844字符 1-3个字节用于记录大小】– 如果表的编码是 utf8 varchar(size) size&#x3D;(65535-3) &#x2F; 3 &#x3D; 21844– 如果表的编码是 gbk varchar(size) size&#x3D;(65535-3) &#x2F; 2 &#x3D; 32766\n1234CREATE TABLE t9 (\t`name` CHAR(255));CREATE TABLE t10 (\t`name` VARCHAR(32766) CHARACTER SET gbk);\n\n#演示字符串类型的使用细节#1.char(4) 和 varchar(4) 这个4表示的是字符，而不是字节，不区分字符是汉字还是字母#2.char(4)是定长(固定的大小)，就是说，即使你插入’aa’，也会占用分配的4个字节的空间#3.varchar(4)是变长(变化的大小)，就是说，如果你插入了’aa’，实际占用空间大小并不是4个字符– 而是按照实际占用空间来分配– varchar本身还需要1-3个字节来记录存放内容长度– L(实际数据大小)+(1-3)字节\n1234567CREATE TABLE t11 (\t`name` CHAR(4));INSERT INTO t11 VALUES(&#x27;abcd&#x27;);INSERT INTO t11 VALUES(&#x27;白居易号&#x27;);SELECT * FROM t11;\n\n123456789CREATE TABLE t12 (\t`name` VARCHAR(4));INSERT INTO t12 VALUES(&#x27;abcd&#x27;);INSERT INTO t12 VALUES(&#x27;白居易号&#x27;);INSERT INTO t12 VALUES(&#x27;ab李白&#x27;);SELECT * FROM t12;\n\n#4.什么时候使用char，什么时候使用varchar– 如果数据定长，推荐使用char，比如md5的密码，邮编，手机号，身份证号码等.char(32)– 如果一个字段的长度是不确定，我们使用varchar，比如留言，文章– 查询速度：char&gt;varchar\n#5.在存放文本时，也可以使用Text数据类型– 可以将Text列视为VARCHAR列，注意Text不能有默认值，大小0-2^16字节– 如果希望存放更多字符，可以选择– MEDIUMTEXT 0-2^24 或者 LONGTEXT 0~2^32\n123CREATE TABLE t13 (content TEXT, content2 MEDIUMTEXT, content3 LONGTEXT);INSERT INTO t13 VALUES(&#x27;李白是诗神&#x27;,&#x27;白居易是诗人&#x27;,&#x27;杜甫是散人~~&#x27;);SELECT * FROM t13;\n\n日期类#演示时间相关的类型#创建一张表，date，datetime，timestamp\n123456CREATE TABLE t14 (\tbirthday DATE, -- 生日\tjob_time DATETIME, -- 记录年月日 时分秒\tlogin_time TIMESTAMP\t NOT NULL DEFAULT CURRENT_TIMESTAMP \t ON UPDATE CURRENT_TIMESTAMP); \n\n– 登录时间，如果希望login_time列自动更新，需要配置\n123SELECT * FROM t14;\tINSERT INTO t14(birthday,job_time)\tVALUES(&#x27;2022-11-18&#x27;,&#x27;2022-11-18 20:41:10&#x27;);\n\n– 如果我们更新了t14表的某条记录，login_time列会自动的以当前时间进行更新\nCRUD语句insert#练习insert语句– 创建一张商品表goods (id int , goods_name , varchar(10) , price double);– 添加两条记录\n1234CREATE TABLE `goods` (\tid INT,\tgoods_name VARCHAR(10),\tprice DOUBLE);\n\n– 添加数据\n12345INSERT INTO `goods` (id,goods_name,price)\tVALUES(10,&#x27;华为手机&#x27;,5000);INSERT INTO `goods` (id,goods_name,price)\tVALUES(20,&#x27;苹果手机&#x27;,9000);SELECT * FROM `goods`;\n\n1234CREATE TABLE `goods2` (\tid INT,\tgoods_name VARCHAR(10),\tprice DOUBLE NOT NULL DEFAULT 100);\n\n#追加练习– 使用insert语句向表employee中插入2个员工的信息\n12345INSERT INTO employee (id,user_name,birthday,entry_date,job,Salary,`resume`)\tVALUES(101,&#x27;杜甫&#x27;,&#x27;1998-11-21&#x27;,&#x27;1998-11-28 21:00:00&#x27;,&#x27;写诗的&#x27;,6000,&#x27;为百姓写诗&#x27;);INSERT INTO employee (id,user_name,birthday,entry_date,job,Salary,`resume`)\tVALUES(102,&#x27;白居易&#x27;,&#x27;2016-11-21&#x27;,&#x27;2016-11-28 21:00:00&#x27;,&#x27;写诗的&#x27;,6000,&#x27;为历史写诗&#x27;);SELECT * FROM employee;\n\n#说明insert语句的细节– 1.插入的数据应与字段的数据类型相同–\t比如把’abc’添加到int类型会错误\n1234INSERT INTO `goods` (id,goods_name,price)**\tVALUES(&#x27;abc&#x27;,&#x27;小米手机&#x27;,4000);#Incorrect integer valueINSERT INTO `goods` (id,goods_name,price)**\tVALUES(&#x27;30&#x27;,&#x27;小米手机&#x27;,4000);#success,底层会尝试转换\n\n– 2.数据的长度应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40的列中\n12INSERT INTO `goods` (id,goods_name,price)\tVALUES(40,&#x27;vivovivovivovivovivovivo手机&#x27;,3000);#Data too long for column\n\n– 3.在values中列出的数据位置必须与被加入的列的排序位置相对应\n1234INSERT INTO `goods` (id,goods_name,price)\tVALUES(&#x27;vivo手机&#x27;,40,3000);#Incorrect integer valueINSERT INTO `goods` (goods_name,id,price)\tVALUES(&#x27;vivo手机&#x27;,40,3000);#success\n\n– 4.字符和日期型数据应包含在单引号中\n12INSERT INTO `goods` (id,goods_name,price)\tVALUES(40,vivo手机,3000);#Unknown column 应该&#x27;vivo手机&#x27;\n\n– 5.**列可以插入空值[前提是该字段允许为空]**，insert into table_name values(null)\n12INSERT INTO `goods` (id,goods_name,price)\tVALUES(50,&#x27;oppo手机&#x27;,NULL);#success 因为我们创建表的时候没设置不为空 即(not null)\n\n– 6.insert into table_name (列名…) values (),(),()  形式添加多条记录\n12INSERT INTO `goods` (id,goods_name,price)\tVALUES(60,&#x27;三星手机&#x27;,6000),(60,&#x27;海尔手机&#x27;,7000);#success\n\n– 7.如果是给表中的所有字段添加数据，可以不写前面的字段名称\n12INSERT INTO `goods` \tVALUES(70,&#x27;IBM手机&#x27;,5000);#success\n\n– 8.默认值的使用，当不给某个字段值时，如果有默认值就会添加默认值，否则报错–\t如果某个列，没有指定not null，那么添加数据时，没有给定值，则会默认给null\n123INSERT INTO `goods2` (id,goods_name)\tVALUES(80,&#x27;格力手机&#x27;);#success,并且自动给price添加默认值100SELECT * FROM `goods2`;\n\nupdate#演示update语句– 要求：在上面创建的employee表中修改表中的记录– 1.将所有员工薪水修改为5000元.如果没有带where这个条件，会修改所有的记录，因此使用要小心\n1UPDATE employee SET Salary = 5000\n\n– 2.将姓名为李白的员工薪水修改为8000元\n123UPDATE employee \tSET salary = 3000 \tWHERE user_name = &#x27;李白&#x27;;\n\n\n– 3.将姓名为杜甫的员工在原有薪水基础上增加2000元\n12345UPDATE employee\tSET salary = salary + 2000\tWHERE user_name = &#x27;杜甫&#x27;;\tSELECT * FROM employee;\n\n#update语句使用细节– 1.update语法可以用新值更新原有表行中的各列– 2.set子句指示要修改哪些列和要给予哪些值– 3.where子句指定应更新哪些行。如没有where子句，则更新所有的行(记录)，因此使用时要小心– 4.如果需要修改多个字段，可以通过set 字段1&#x3D;值1，字段2&#x3D;值2…..\ndelete#delete语句演示– 删除表中名称为’杜甫’的记录\n12DELETE FROM employee\tWHERE user_name = &#x27;杜甫&#x27;;\n\n– 删除表中所有记录–\t如不需要where子句，将删除表中所有数据\n1DELETE FROM employee;\n\n#delete语句使用细节– delete语句不能删除某一列的值(可使用update 设为null或者’’)\n1UPDATE employee SET job = &#x27;&#x27; WHERE user_name=&#x27;杜甫&#x27;;\n\n– 使用delete语句仅删除记录，不删除表本身。如要删除表，使用drop table语句。– \tdrop table 表名;\n12DROP TABLE employee;SELECT * FROM employee;\n\nselect1.0– select 语句【重点 难点】– 格式:– SELECT [distinct] * {column1,column2,column3..}– \t\tFROM table_name;\n123456CREATE TABLE student (\tid INT NOT NULL DEFAULT 1,\t`name` VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,\tchinese FLOAT NOT NULL DEFAULT 0.0,\tenglish FLOAT NOT NULL DEFAULT 0.0,\tmath FLOAT NOT NULL DEFAULT 0.0);\n\n12345INSERT INTO student \tVALUES(1,&#x27;李白&#x27;,100,90,80),(2,&#x27;杜甫&#x27;,100,90,90),(3,&#x27;白居易&#x27;,95,80,80),(4,&#x27;王维&#x27;,95,80,80),\t(5,&#x27;赵云&#x27;,82,84,67),(6,&#x27;关羽&#x27;,88,98,90),(7,&#x27;张飞&#x27;,67,98,56),(8,&#x27;李世民&#x27;,100,90,95);\tSELECT * FROM student;\n\n– 查询表中所有学生的信息\n1SELECT * FROM student;\n\n– 查询表中所有学生的姓名和对应的英语成绩\n1SELECT `name`,english FROM student;\n\n– 过滤表中重复数据 distinct\n1SELECT DISTINCT english FROM student;\n\n– 要查询的记录，每个字段都相同，才会去重\n1SELECT DISTINCT `name`,english FROM student;\n\n2.0#select语句的使用– 使用表达式对查询的列进行运算– SELECT * |{column1|expression,column2|expression…}– \t\tFROM table_name;\n– 在select语句中可使用as语句– SELECT column_name as 别名 from 表名;\n– 统计每个学生的总分\n1SELECT `name`,(chinese+english+math) FROM student;\n\n– 在所有学生总分加10分的情况\n1SELECT `name`,(chinese+english+math+10) FROM student;\n\n– 使用别名表示学生分数\n1SELECT `name` AS &#x27;名字&#x27;,(chinese+english+math+10) AS total_score FROM student;\n\n3.0#select语句– 查询姓名为赵云的学生成绩\n1SELECT * FROM student WHERE `name`=&#x27;赵云&#x27;;\n\n– 查询英语成绩大于90分的同学\n1SELECT * FROM student WHERE english&gt;90;\n\n– 查询总分大于200分的所有同学\n1SELECT * FROM student WHERE (chinese+english+math)&gt;200;\n\n– 查询math大于60并且(and)id大于4的学生成绩\n1SELECT * FROM student WHERE math&gt;60 AND id&gt;4;\n\n– 查询英语成绩大于语文成绩的同学\n1SELECT * FROM student WHERE english&gt;chinese;\n\n– 查询总分大于200分并且数学成绩小于语文成绩的姓李的学生– 李%表示名字以李开头的就可以\n123SELECT * FROM student WHERE\t(chinese+math+english)&gt;200 AND math&lt;chinese\t AND `name` LIKE &#x27;李%&#x27;;\n\n\n– 查询英语成绩在80-90之间的同学\n1SELECT * FROM student WHERE english&gt;=80 AND english&lt;=90;\n\n– between..and…是一个闭区间\n1SELECT * FROM student WHERE english BETWEEN 80 AND 90;\n\n– 查询数学分数为89，90，91的同学\n123SELECT * FROM student WHERE math BETWEEN 89 AND 91;SELECT * FROM student WHERE math=89 OR math=90 OR math=91;SELECT * FROM student WHERE math IN(89,90,91);\n\n– 查询所有姓李的学生成绩(%表示任意多个字符)\n1SELECT * FROM student WHERE `name` LIKE &#x27;李%&#x27;;\n\n– 查询数学分&gt;80，语文成绩&gt;80的同学\n1SELECT * FROM student WHERE math&gt;80 AND chinese&gt;80;\n\n函数统计函数#演示mysql统计函数的使用– count– 统计一个班级****共有多少学生\n1SELECT COUNT(*) FROM student;\n\n– 统计数学成绩大于90的有多少个\n1SELECT COUNT(*) FROM student WHERE math&gt;90;\n\n– 统计总分大于250的人数有多少\n1SELECT COUNT(*) FROM student WHERE (math+chinese+english)&gt;250;\n\n– count(*)和count(列)的区别– 解释：count(*)返回满足条件的记录的行数– count(列)：统计满足条件的某列有多少个，但是会排除为null\n123456CREATE TABLE t15 (\t`name` VARCHAR(20));INSERT INTO t15 VALUES(&#x27;tom&#x27;);INSERT INTO t15 VALUES(&#x27;jack&#x27;);INSERT INTO t15 VALUES(&#x27;mary&#x27;);INSERT INTO t15 VALUES(NULL);\n\n123SELECT * FROM t15;SELECT COUNT(*) FROM t15;-- 4SELECT COUNT(`name`) FROM t15;-- 3\n\n– sum– 统计一个班级数学总成绩\n1SELECT SUM(math) FROM student;\n\n– 统计一个班级语文，英语，数学各科的总成绩\n1SELECT SUM(math),SUM(english),SUM(chinese) FROM student;\n\n– 统计一个班级语文，英语，数学的成绩总和\n1SELECT SUM(math+english+chinese) FROM student;\n\n– 统计一个班级语文成绩平均分\n1SELECT SUM(chinese)/COUNT(*) FROM student;\n\n– avg– 求一个班级数学平均分\n1SELECT AVG(math) FROM student;\n\n– 求一个班级总分平均分\n1SELECT AVG(math+english+chinese) FROM student;\n\n– Max&#x2F;min– 求班级最高分和最低分\n12SELECT MAX(math+chinese+english) FROM student;SELECT MIN(math+chinese+english) FROM student;\n\n分组函数#演示group by的使用\n123456CREATE TABLE dept(/*部门表*/deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,dname VARCHAR(20)NOT NULL DEFAULT &#x27;&#x27; &#x27;&#x27;,1oc VARCHAR(13)NOT NULL DEFAULT &#x27;&#x27; &#x27;&#x27;);INSERT INTO dept VALUES(10,&#x27;ACCOUNTING&#x27;,&#x27;NEW YORK&#x27;),(20,&#x27;RESEARCH&#x27;,&#x27;DALLAS&#x27;),(30,&#x27;SALES&#x27;,&#x27;CHICAGO&#x27;),(40,&#x27;OPERATIONS&#x27;,&#x27;BOSTON&#x27;);SELECT * FROM dept;\n\n#创建表EMP雇员\n12345678910DROP TABLE emp;CREATE TABLE emp(empno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,/*编号*/ename VARCHAR(20)NOT NULL DEFAULT &#x27;&#x27; &#x27;&#x27;,/*名字*/job VARCHAR(9)NOT NULL DEFAULT &#x27;&#x27; &#x27;&#x27;,/*工作*/mgr MEDIUMINT UNSIGNED,/*上级编号*/hiredate DATE NOT NULL,/*入职时间*/sa1 DECIMAL(7,2) NOT NULL,/*薪水*/comm DECIMAL(7,2),/*红利*/deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0/*部门编号*/);\n\n– 添加测试数据\n123456789101112131415INSERT INTO emp VALUES(7369,&#x27;SMITH&#x27;,&#x27;CLERK&#x27;,7902,&#x27;1990-12-17&#x27;,800.00,NULL,20),(7499,&#x27;ALLEN&#x27;,&#x27;SALESMAN&#x27;,7698,&#x27;1991-2-20&#x27;,1600.00,300.00,30),(7521,&#x27;WARD&#x27;,&#x27;SALESMAN&#x27;,7698,&#x27;1991-2-22&#x27;,1250.00,500.00,30),(7566,&#x27;J0NES&#x27;,&#x27;MANAGER&#x27;,7839,&#x27;1991-4-2&#x27;,2975.00,NULL,20),(7654,&#x27;MARTIN&#x27;,&#x27;SALESMAN&#x27;,7698,&#x27;1991-9-28&#x27;,1250.00,1400.00,30),(7698,&#x27;BLAKE&#x27;,&#x27;MANAGER&#x27;,7839,&#x27;1991-5-1&#x27;,2850.00,NULL,30),(7782,&#x27;CLARK&#x27;,&#x27;MANAGER&#x27;,7839,&#x27;1991-6-9&#x27;,2450.00,NULL,10),(7788,&#x27;SC0TT&#x27;,&#x27;ANALYST&#x27;,7566,&#x27;1997-4-19&#x27;,3000.00,NULL,20),(7839,&#x27;KING&#x27;,&#x27;PRESIDENT&#x27;,NULL,&#x27;1991-11-17&#x27;,5000.00,NULL,10),(7844,&#x27;TURNER&#x27;,&#x27;SALESMAN&#x27;,7698,&#x27;1991-9-8&#x27;,1500.00,NULL,30),(7900,&#x27;JAMES&#x27;,&#x27;CLERK&#x27;,7698,&#x27;1991-12-3&#x27;,950.00,NULL,30),(7902,&#x27;FORD&#x27;,&#x27;ANALYST&#x27;,7566,&#x27;1991-12-3&#x27;,3000.00,NULL,20),(7934,&#x27;MILLER&#x27;,&#x27;CLERK&#x27;,7782,&#x27;1992-1-23&#x27;,1300.00,NULL,10);SELECT * FROM emp;\n\n#工资级别表\n123456789101112CREATE TABLE salgrade(grade MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,/*工资级别*/losal DECIMAL (17,2) NOT NULL,/*该级别的最低工资*/hisal DECIMAL(17,2) NOT NULL /*该级别的最高工资*/);INSERT INTO salgrade VALUES(1,700,1200);INSERT INTO salgrade VALUES(2,1201,1400);INSERT INTO salgrade VALUES(3,1401,2000);INSERT INTO salgrade VALUES(4,2001,3000);INSERT INTO salgrade VALUES(5,3001,9999);SELECT * FROM salgrade;\n\n– 演示group by + having– having子句用于限制分组显示结果\n– 如何显示每个部门的平均工资和最高工资– avg(sa1) max(sa1)– 按照部门来分组查询\n12SELECT AVG(sa1),MAX(sa1),deptno \tFROM emp GROUP BY deptno;\n\n– 显示每个部门的每种岗位的平均工资和最低工资– avg(sa1) min(sa1)– 按照部门来分组查询\n12SELECT AVG(sa1),MIN(sa1),deptno,job\tFROM emp GROUP BY deptno,job;\n\n– 显示平均工资低于2000的部门号和它的平均工资– 化繁为简，各个击破– 1.显示各个部门的平均工资和部门号– 2.在1的结果基础上，进行过滤，保留平均工资小于2000的\n123SELECT AVG(sa1),deptno \t\tFROM emp GROUP BY deptno\t\tHAVING AVG(sa1)&lt;2000;\n\n– 使用别名\n123SELECT AVG(sa1) AS avg_sal,deptno \t\tFROM emp GROUP BY deptno\t\tHAVING avg_sal&lt;2000;\n\n字符串函数#字符串函数使用演示    使用emp表来演示– CHARSET(str) 返回字符串字符集\n1SELECT CHARSET(ename) FROM emp;\n\n– CONCAT (string2 […..]) 连接字符串,将多个列拼接成一列\n1SELECT CONCAT(ename,&#x27; job is &#x27;,job) FROM emp;\n\n– INSTR (string,substring) 返回substring在string中出现的位置，没有返回0– dual亚元表，系统表 可以作为测试表使用\n1SELECT INSTR(&#x27;libai&#x27;,&#x27;li&#x27;) FROM DUAL;\n\n– UCASE (string2) 转换为大写\n1SELECT UCASE(ename) FROM emp;\n\n– LCASE (string2) 转换为小写\n1SELECT LCASE(ename) FROM emp;\n\n– LEFT (string2,length) 从string2中的左边起取length个字符\n1SELECT LEFT(ename,2) FROM emp;\n\n– RIGHT (string2,length) 从string2中的右边起取length个字符\n1SELECT RIGHT(ename,2) FROM emp;\n\n– LENGTH (string) string长度[按照字节返回]  比如’李白’会返回6（utf8字符集）\n1SELECT LENGTH(ename) FROM emp;\n\n– REPLACE (str,search_str,replace_str)– 在str中用replace_str替换search_str– 如果是manager就替换成经理\n1SELECT ename ,REPLACE(job,&#x27;MANAGER&#x27;,&#x27;经理&#x27;) FROM emp;\n\n– STRCMP (string1,string2) 逐字符比较两字符串大小\n1SELECT STRCMP(&#x27;hsp&#x27;,&#x27;jsp&#x27;) FROM DUAL;\n\n– SUBSTRING (str，position，[length])– 从str的position开始【从1开始计算】，取length个字符\n1SELECT SUBSTRING(ename ,1,2) FROM emp;\n\n– LTRIM (string2) RTRIM (string2) 去除前端空格或者后端空格– TRIM(string) 去除前后端空格\n123SELECT LTRIM(&#x27;      李白是诗人&#x27;) FROM DUAL;SELECT LTRIM(&#x27;李白是诗人      &#x27;) FROM DUAL;SELECT LTRIM(&#x27;      李白是诗人       &#x27;) FROM DUAL;\n\n– 以首字母小写的方式显示所有员工的姓名– 方式1\n12SELECT CONCAT( LCASE(SUBSTRING(ename,1,1)) ,SUBSTRING(ename,2))\tFROM emp;\n\n– 方式2\n12SELECT REPLACE(ename,SUBSTRING(ename,1,1),LCASE(SUBSTRING(ename,1,1)))\tFROM emp;\n\n– 方式3\n12SELECT CONCAT( LCASE(LEFT(ename,1)) ,SUBSTRING(ename,2))\tFROM emp;\n\n数学函数#演示数学相关函数\n– ABS (num) 绝对值\n1SELECT ABS(-10) FROM DUAL;\n\n– BIN (decimal_number) 十进制转二进制\n1SELECT BIN(10) FROM DUAL;\n\n– CEILING (num2) 向上取整，得到比num2大的最小整数\n1SELECT CEILING(-1.1) FROM DUAL;\n\n– CONV(num2,from_base,to_base) 进制转换– 下面的含义是  8是十进制的8，转成二进制输出\n1SELECT CONV(8,10,2) FROM DUAL;\n\n– 下面的含义是  8是十六进制的8，转成二进制输出\n1SELECT CONV(8,16,2) FROM DUAL;\n\n– FLOOR (num2) 向下取整，得到比num2小的最大整数\n1SELECT FLOOR(-1.1) FROM DUAL;\n\n– FORMAT (num,decimal_places) 保留小数位数(四舍五入)\n1SELECT FORMAT(78.1254582,2) FROM DUAL;\n\n– HEX (DecimalNumber) 转十六进制\n– LEAST (num,num2,…) 求最小值\n1SELECT LEAST(0,1,-10,4) FROM DUAL;\n\n– MOD (numerator,denominator) 求余\n1SELECT MOD(10,3) FROM DUAL;\n\n– RAND ([seed])  RAND([seed]) 返回随机数 其范围为0&lt;&#x3D;v&lt;&#x3D;1.0– 1.如果使用RAND()每次返回不同的随机数，在0&lt;&#x3D;v&lt;&#x3D;1.0之间– 2.如果使用RAND(seed) 返回随机数，范围0&lt;&#x3D;v&lt;&#x3D;1.0，如果seed不变，该随机数也不变了\n1SELECT RAND(6) FROM DUAL;\n\n日期函数#日期时间相关函数\n– CURRENT_DATE()    当前日期\n1SELECT CURRENT_DATE() FROM DUAL;\n\n– CURRENT_TIME()    当前时间\n1SELECT CURRENT_TIME() FROM DUAL;\n\n– CURRENT_TIMESTAMP()    当前时间戳\n1SELECT CURRENT_TIMESTAMP() FROM DUAL;\n\n– 创建测试表 信息表\n1234CREATE TABLE mes(\tid INT,\tcontent VARCHAR(32),\tsend_time DATETIME);\n\n– 添加一条记录\n123INSERT INTO mes VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP());INSERT INTO mes VALUES(2,&#x27;上海新闻&#x27;,NOW());INSERT INTO mes VALUES(3,&#x27;广州新闻&#x27;,NOW());\n\n12SELECT * FROM mes;SELECT NOW() FROM DUAL;\n\n– 应用实例– 显示所有新闻信息，发布日期只显示日期，不显示时间\n1SELECT id,content,DATE(send_time) FROM mes;\n\n– 请查询在10分钟内发布的新闻\n12SELECT * FROM mes WHERE DATE_ADD(send_time,INTERVAL 10 MINUTE)&gt;=NOW();SELECT * FROM mes WHERE send_time&gt;= DATE_SUB(NOW(),INTERVAL 10 MINUTE);\n\n– 请在mysql的sql语句中求出2011-11-11和1990-1-1相差多少天\n1SELECT DATEDIFF(&#x27;2011-11-11&#x27;,&#x27;1990-01-01&#x27;) FROM DUAL;\n\n– 请用mysql的sql语句求出你活了多少天？【练习】 2003-09-11 出生\n1SELECT DATEDIFF(NOW(),&#x27;2003-09-11&#x27;) FROM DUAL;\n\n– 如果你能活80岁，求出你还能活多少天? 【练习】 2003-09-11 出生– 先求出活80岁时，是什么日期– 然后在使用datediff(x,now());– INTERVAL 80 YEAR：YEAR可以是替换成年月日，时分秒\n1SELECT DATEDIFF(DATE_ADD(&#x27;2003-09-11&#x27;,INTERVAL 80 YEAR),NOW()) FROM DUAL;\n\n– YEAR|MONTH|DAY| DATE (datetimee)：(即返回年|月|日)\n1234SELECT YEAR(NOW()) FROM DUAL;SELECT MONTH(NOW()) FROM DUAL; SELECT DAY(NOW()) FROM DUAL;SELECT MONTH(&#x27;2003-11-10&#x27;) FROM DUAL;\n\n– unix_timestamp()：返回的是1970-01-01 到现在的秒数\n1SELECT UNIX_TIMESTAMP() FROM DUAL;\n\n– FROM_UNIXTIME()：可以把一个unix_timestamp秒数，转成指定格式的日期\n12SELECT FROM_UNIXTIME(1669349758,&#x27;%Y-%m-%d&#x27;) FROM DUAL;SELECT FROM_UNIXTIME(1669349758,&#x27;%Y-%m-%d %H:%i:%s&#x27;) FROM DUAL;\n\n加密函数#演示加密函数和系统函数– USER()   查询用户– 可以查看登录到mysql的有哪些用户，以及登录的IP\n1SELECT USER() FROM DUAL; -- 用户@IP地址\n\n– DATABASE()   查询当前使用数据库名称\n1SELECT DATABASE();\n\n– MD5(str)  为字符串算出一个MD5  32位的字符串，常用(用户密码)加密– root 密码是lby-&gt;加密md5-&gt;在数据库中存放的是加密后的密码\n12SELECT MD5(&#x27;lby&#x27;) FROM DUAL;SELECT LENGTH(MD5(&#x27;lby&#x27;)) FROM DUAL;\n\n– 演示用户表，存放密码时，是md5\n1234CREATE TABLE lby_user\t(id INT,\t`name` VARCHAR(32) NOT NULL DEFAULT &#x27; &#x27;,\tpwd CHAR(32) NOT NULL DEFAULT &#x27; &#x27;);\n\n12INSERT INTO lby_user\tVALUES(100,&#x27;李博扬&#x27;,MD5(&#x27;lby&#x27;));\n\n1234SELECT * FROM lby_user;SELECT * \tFROM lby_user\tWHERE `name`=&#x27;李博扬&#x27; AND pwd=MD5(&#x27;lby&#x27;);\n\n– PASSWORD(str) –加密函数,在MYSQL数据库的用户密码就是PASSWORD加密的\n1SELECT PASSWORD(&#x27;lby&#x27;) FROM DUAL;-- *2DE7B6C45E31629453E39499BDA8A5950CA05900\n\n\n– select * from mysql.user \\G 从原文密码str计算并返回密码字符串– 通常用于对mysql数据库的用户密码加密– mysql.user 表示数据库.表\n1SELECT * FROM mysql.user;\n\n流程控制函数#演示流程控制语句– IF(expr1,expr2,expr3) 如果expr1为True，则返回expr2，否则返回expr3\n1SELECT IF(TRUE,&#x27;李白&#x27;,&#x27;杜甫&#x27;) FROM DUAL;\n\n– IFNULL(expr1,expr2) 如果expr1不为NULL，则返回expr1，否则返回expr2\n1SELECT IFNULL(NULL,&#x27;李白&#x27;) FROM DUAL;\n\n– SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END;[类似多重分支]– 如果expr1为TRUE，则返回expr2，如果expr3为TRUE，返回expr4，否则返回expr5\n1234SELECT CASE\tWHEN TRUE THEN &#x27;jack&#x27; -- jack\tWHEN FALSE THEN &#x27;tom&#x27;\tELSE &#x27;mary&#x27; END\n\n\n– 1.查询emp表，如果comm是null，则显示0.0– 判断是否为null，要使用is null，判断不为空，使用is not null\n12SELECT ename,IF(comm IS NULL,0.0,comm) FROM emp;SELECT ename,IFNULL(comm,0.0) FROM emp;\n\n– 2.如果emp表的job是CLERK则显示职员，如果是MANAGER则显示经理– 如果是SALESMAN则显示销售人员，其它正常显示\n123456SELECT ename,(SELECT CASE\t\tWHEN job=&#x27;clerk&#x27; THEN &#x27;职员&#x27;\t\tWHEN job=&#x27;manager&#x27; THEN &#x27;经理&#x27;\t\tWHEN job=&#x27;salesman&#x27; THEN &#x27;销售人员&#x27;\t\tELSE  job END) job\tFROM emp;\n\n查询增强#查询加强– 使用where子句– 如何查找1992.1.1后入职的员工– 在mysql中，日期类型可以直接比较，需要注意格式\n12SELECT * FROM emp\tWHERE hiredate &gt; &#x27;1992-1-1&#x27;;\n\n– 如何使用like操作符– %表示0到多个字符  _表示单个字符– 如何显示首字符为S的员工姓名和工资\n123SELECT ename,sa1\tFROM emp\tWHERE ename LIKE &#x27;S%&#x27;;\n\n– 如何显示第三个字符为大写O的所有员工的姓名和工资\n12SELECT ename,sa1 FROM emp\tWHERE ename LIKE &#x27;__0%&#x27;;\n\n– 如何显示没有上级的雇员的情况\n12SELECT * FROM emp\tWHERE mgr IS NULL;\n\n– 查询表结构\n1DESC emp;\n\n– 使用order by子句– 如何按照工资从低到高的顺序[升序]，显示雇员的信息\n12SELECT * FROM emp\tORDER BY sa1;\n\n– 按照部门号升序而雇员的工资降序排列，显示雇员信息\n12SELECT * FROM emp\tORDER BY deptno ASC,sa1 DESC;\n\n分页查询#分页查询– 按雇员的id号升序取出，每页显示3条记录，请分别显示第1页，第2页，第2页– 第1页\n123SELECT * FROM emp\tORDER BY empno\tLIMIT 0,3;\n\n– 第2页\n123SELECT * FROM emp\tORDER BY empno\tLIMIT 3,3;\n\n– 第3页\n123SELECT * FROM emp\tORDER BY empno\tLIMIT 6,3;\n\n– 推导一个公式\n12SELECT * FROM emp\tORDER BY empno\n\n​\tLIMIT 每页显示记录数 * (第几页—1)，每页显示记录数– 练习\n123SELECT * FROM emp\tORDER BY empno DESC\tLIMIT 20,5;\n\n分组增强#增强group by的使用\n1SELECT * FROM emp;\n\n– 1.显示每种岗位的雇员总数，平均工资\n12SELECT COUNT(*),job,AVG(sa1) FROM emp\tGROUP BY job;\n\n– 2.显示雇员总数，以及获得补助的雇员数– 思路：获得补助的雇员数就是comm列为非null，就是count(),如果该列的值为null，是不会统计的\n12SELECT COUNT(*),COUNT(comm) \tFROM emp;\n\n– 扩展要求 统计没有获得补助的雇员数\n1234SELECT COUNT(*),COUNT(IF(comm IS NULL,1,NULL))\tFROM emp;SELECT COUNT(*),COUNT(*)-COUNT(comm)\tFROM emp;\n\n– 3.显示管理者的总人数\n12SELECT COUNT(DISTINCT mgr)\tFROM emp;\n\n– 4.显示雇员工资的最大差额\n12SELECT MAX(sa1)-MIN(sa1)\tFROM emp;\n\n\n\n多表查询笛卡儿集#多表查询– 显示雇员名，雇员工资及所在部门的名字[笛卡儿集]&#x2F;*    分析    1.雇员名，雇员工资来自emp表    2.部门的名字来自dept表    3.需求对emp和dept查询    *&#x2F;\n1SELECT * FROM emp,dept;\n\n– 在默认情况下，当两个表查询时，规则为– 1.从第一张表中，取出一行和第二张表的每一行进行组合– 2.返回结果，一共返回的记录数为第一张表的行数*第二张表的行数– 3.这样多表查询默认处理返回的结果，称为笛卡尔表– 4.解决这个多表的关键就是要写出正确的过滤条件where，需求程序员进行分析– 5.当我们需要指定显示某个表的列是，需要 表.列\n12SELECT ename,sa1,dname FROM emp,dept\tWHERE emp.deptno=dept.deptno;\n\n12SELECT ename,sa1,emp.deptno FROM emp,dept\tWHERE emp.deptno=dept.deptno;\n\n\n#注意事项：多表查询的条件不能少于表的个数-1，否则会出现笛卡儿集– 如何显示部门号为10的部门名，员工名和工资\n123SELECT ename,sa1,dname,emp.deptno\tfrom emp,dept\twhere emp.deptno=dept.deptno and emp.deptno=10;\n\n– 显示各个员工的姓名，工资，及其工资的级别– 思路：姓名，工资来自emp–\t 工资级别来自salgrade\n123select ename,sa1,grade\tfrom emp,salgrade\twhere sa1 between losal and hisal ;\n\n自连接#多表查询的自连接– 思考：显示公司员工名字和他的上级的名字– 分析：员工名字在emp，上级的名字在emp– 员工与上级是通过emp表的mgr列关联\n123SELECT worker.ename,boss.ename\tFROM emp worker,emp boss\tWHERE worker.mgr=boss.empno;\n\n– 自连接的特点– 1.把同一张表当作两张表来使用– 2.需要给表取别名–\t格式：表名 表别名– 3.列名不明确，可以指定列的别名\n多行子查询#子查询的演示– 请思考：如何显示与SMITH同一部门的所有员工？&#x2F;*    1.先查询到SMITH的部门号    2.把上面的select语句当作一个子查询来使用*&#x2F;\n123SELECT deptno\tFROM emp\tWHERE ename=&#x27;SMITH&#x27;\n\n– 单行子查询\n1234567SELECT *\tFROM emp\tWHERE deptno=(\t\tSELECT deptno\t\tFROM emp\t\tWHERE ename=&#x27;SMITH&#x27;\t\t)\n\n– 如何查询和部门号为10的工作相同的雇员的名字，岗位，工资，部门号。– 但是不包含部门号为10的雇员&#x2F;*    1.先查询到10号部门有哪些工作    2.把上面查询的结果当作子查询使用*&#x2F;\n123SELECT DISTINCT job\tFROM emp\tWHERE deptno=10;\n\n1234567SELECT ename,job,sa1,deptno\tFROM emp\tWHERE job IN(\t\tSELECT DISTINCT job\t\tFROM emp\t\tWHERE deptno=10\t\t) AND deptno!=10;\n\n\n\n多列子查询#多列子查询– 请思考如何查询与smith的部门和岗位完全相同的所有雇员(并且不包含smith本人)– (字段1，字段2…..) &#x3D; (select 字段1，字段2 from……)\n– 分析：– 1.得到smith的部门号和岗位\n123SELECT deptno,job\tFROM emp\tWHERE ename=&#x27;SMITH&#x27;;\n\n– 2.把上面查询结果当作子查询来使用，并且使用多列子查询的语法进行匹配\n1234567SELECT*\tFROM emp\tWHERE(deptno,job)=(\t\t\tSELECT deptno,job\t\t\tFROM emp\t\t\tWHERE ename=&#x27;allen&#x27;\t\t) AND ename&lt;&gt;&#x27;allen&#x27;;\n\n– &lt;&gt;表示不等于\n#子查询练习– 查找每个部门工资高于本部门平均工资的人的资料\n1234567SELECT *\tFROM emp,(\t\tSELECT deptno,AVG(sa1) avg_sa1\t\tFROM emp\t\tGROUP BY deptno\t)temp\tWHERE emp.deptno=temp.deptno AND emp.sa1&gt;temp.avg_sa1\n\n– 查找每个部门工资最高的人的详细资料\n1234567SELECT *\tFROM emp,(\t\tSELECT deptno,MAX(sa1) max_sa1\t\tFROM emp\t\tGROUP BY deptno\t)temp\tWHERE emp.deptno=temp.deptno AND emp.sa1=temp.max_sa1\n\n– 查询每个部门的信息(包括：部门号，编号，地址)和人员数量– 分析：– 1.部门名,编号,地址来自dept表– 2.各个部门的人员数量-》构建一个临时表\n123SELECT COUNT(*),deptno\tFROM emp\tGROUP BY deptno;\t\n\n1234567SELECT dname,dept.deptno,1oc ,per_num\tFROM dept,(\t\tSELECT COUNT(*) per_num,deptno\t\tFROM emp\t\tGROUP BY deptno\t)temp\tWHERE temp.deptno=dept.deptno\n\n– 还有一种写法,表.*表示将该表所有列都显示出来，可以简化sql语句– 在多表查询中，当多个表的列不重复时，才可以直接写列名\n1234567SELECT temp.*,dname,1oc\tFROM dept,(\t\tSELECT COUNT(*) per_num,deptno\t\tFROM emp\t\tGROUP BY deptno\t)temp\tWHERE temp.deptno=dept.deptno\n\n\n\n表复制和去重#演示表的复制– 为了对某个sql语句进行效率测试，我们需要海量数据时，可以使用此法为表创建海量数据\n123456CREATE TABLE my_tb01\t(id INT,\t`name` VARCHAR(32),\tsal DOUBLE,\tjob VARCHAR(32),\tdeptno INT);\n\n– 演示如何自我复制– 1.先把emp表的记录复制到my_tb01\n123INSERT INTO my_tb01\t(id,`name`,sal,job,deptno)\tSELECT empno,ename,sa1,job,deptno FROM emp;\n\n– 2.自我复制\n12INSERT INTO my_tb01\tSELECT * FROM my_tb01;\n\n– 如何删除掉一张表重复记录– 1.先创建一张表my_tb02– 2.让my_tb02有重复的记录\n1CREATE TABLE my_tb02 LIKE emp;\n\n– 把emp表的结构(列)，复制到my_tb02\n12INSERT INTO my_tb02\tSELECT * FROM emp;\n\n– 3.考虑去重– 分析&#x2F;*    1.先创建一张临时表my_tb，该表的结构与my_tb02一致    2.把my_tb02的记录通过distinct关键字处理后，把记录复制到my_tb    3.清除掉my_tb02记录    4.把my_tb表的记录复制到my_tb02    5.drop掉临时表my_tb*&#x2F;\n1234567891011CREATE TABLE my_tb LIKE my_tb02;INSERT INTO my_tb\tSELECT DISTINCT * FROM my_tb02;DELETE FROM my_tb02;INSERT INTO my_tb02\tSELECT * FROM my_tb;\tDROP TABLE my_tb;\n\n合并查询#演示合并查询\n123SELECT ename,sa1,job FROM emp WHERE sa1&gt;2500;SELECT ename,sa1,job FROM emp WHERE job=&#x27;manager&#x27;\n\n– union all 就是将两个查询结果合并，不会去重\n123SELECT ename,sa1,job FROM emp WHERE sa1&gt;2500UNION ALLSELECT ename,sa1,job FROM emp WHERE job=&#x27;manager&#x27;\n\n– union 该操作赋与 union all相似，但是会自动去掉结果中重复的记录\n123SELECT ename,sa1,job FROM emp WHERE sa1&gt;2500UNIONSELECT ename,sa1,job FROM emp WHERE job=&#x27;manager&#x27;\n\n\n\n左外连接与右外连接#演示外连接\n– 比如：列出部门名称和这些部门的员工名称和工作，同时要求显示出那些没有员工的部门\n– 使用我们学习过的多表查询的sql，看看效果如何\n1234SELECT dname,ename,job\tFROM emp,dept\tWHERE emp.deptno=dept.deptno\tORDER BY dname;\n\n#外连接– 1，左外连接 (如果左侧的表完全显示我们就说是左外连接)– 1，右外连接 (如果右侧的表完全显示我们就说是右外连接)\n– 创建stu\n1234CREATE TABLE stu (\tid INT,\t`name` VARCHAR(32));INSERT INTO stu VALUES(1,&#x27;jack&#x27;),(2,&#x27;tom&#x27;),(3,&#x27;kity&#x27;),(4,&#x27;noo&#x27;);\n\n– 创建表exam\n1234CREATE TABLE exam (\tid INT,\tgrade INT);INSERT INTO exam VALUES(1,56),(2,76),(11,8);\n\n– 使用左连接(显示所有人的成绩，如果没有成绩，也要显示该人的姓名和id号，成绩显示为空)&#x2F;*    格式：select…from 表1 left join 表2 on 条件*&#x2F;\n123SELECT `name`,stu.id,grade\tFROM stu,exam\tWHERE stu.id=exam.id\n\n– 改成左连接\n123SELECT `name`,stu.id ,grade\tFROM stu LEFT JOIN exam\tON stu.id=exam.id\n\n\n– 右外连接(显示所有成绩，如果没有名字匹配，显示空)\n123SELECT `name`,grade,exam.id\tFROM stu RIGHT JOIN exam\tON stu.id=exam.id\n\n123SELECT dept.deptno,`ename`,job\tFROM emp RIGHT JOIN dept\tON emp.deptno=dept.deptno\n\n123SELECT dept.deptno,`ename`,job\tFROM dept LEFT JOIN emp\tON emp.deptno=dept.deptno\n\nMySql约束主键#演示主键使用– id name email\n1234CREATE TABLE t17 (\tid INT PRIMARY KEY, -- 表示id列是主键\t`name` VARCHAR(32),\temail VARCHAR(32));\n\n– 主键列的值是不可以重复的\n12INSERT INTO t17\tVALUES(1,&#x27;jack&#x27;,&#x27;jack@sohu.com&#x27;),(2,&#x27;tom&#x27;,&#x27;tom@sohu.com&#x27;);\n\n1INSERT INTO t17 VALUES(1,&#x27;lvy&#x27;,&#x27;lvy@sohu.com&#x27;); 添加失败，主键重复\n\n– 主键使用细节– primary key不能重复而且不能为null\n1INSERT INTO t17 VALUES(NULL,&#x27;gsp&#x27;,&#x27;gsp@sohu.com&#x27;); -- Column &#x27;id&#x27; cannot be null\n\n– 一张表最多只能有一个主键，但可以是复合主键\n1234CREATE TABLE t18 (\tid INT PRIMARY KEY, \t`name` VARCHAR(32) PRIMARY KEY,\temail VARCHAR(32)); -- Multiple primary key defined\n\n– 演示复合主键使用(id和name做成复合主键，即id和name做为一个复合主键，而不是id是主键1，name是主键2)\t\n12345678910CREATE TABLE t18 (\tid INT , \t`name` VARCHAR(32),\temail VARCHAR(32),\tPRIMARY KEY(id,`name`));INSERT INTO t18 VALUES(1,&#x27;gsp&#x27;,&#x27;gsp@sohu.com&#x27;);INSERT INTO t18 VALUES(1,&#x27;dsa&#x27;,&#x27;dsa@sohu.com&#x27;);INSERT INTO t18 VALUES(2,&#x27;dsa&#x27;,&#x27;dsa@sohu.com&#x27;);INSERT INTO t18 VALUES(1,&#x27;gsp&#x27;,&#x27;gsp@sohu.com&#x27;); -- Duplicate entry &#x27;1-gsp&#x27; for key &#x27;PRIMARY&#x27;\n\n– 主键的指定方式有两种– 1.直接在字段名后指定：字段名 primary key– 2.在表定义最后写 primary key(列名);– 参考上面创建表的方式– 使用desc表名，可以看到primary key的情况\n12DESC t18;DESC t17;\n\n– 实际开发中，每个表往往都会设计一个主键\nunique#演示unique使用\n1234567CREATE TABLE t19 (\tid INT UNIQUE,-- 表示id列是不可重复的，但可为null\t`name` VARCHAR(32),\temail VARCHAR(32));\tINSERT INTO t19 VALUES(1,&#x27;jack&#x27;,&#x27;jack@sohu.com&#x27;);-- Duplicate entry &#x27;1&#x27; for key &#x27;id&#x27;INSERT INTO t19 VALUES(1,&#x27;tom&#x27;,&#x27;tom@sohu.com&#x27;);\n\n– unique使用细节– 如果没有指定not null，则unique字段可以有多个null– 如果一个列(字段)是unique not null，那么使用效果类似primary key\n12INSERT INTO t19 VALUES(NULL,&#x27;jack&#x27;,&#x27;jack@sohu.com&#x27;);SELECT * FROM t19;\n\n– 一张表可以有多个unique字段\n1234CREATE TABLE t20 (\tid INT UNIQUE,\t`name` VARCHAR(32) UNIQUE,\temail VARCHAR(32));\n\n外键#外键演示– 创建主表 my_class\n123CREATE TABLE my_class (\tid INT PRIMARY KEY, -- 班级编号\t`name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;);\n\n– 创建从表 my_stu\n1234CREATE TABLE my_stu (\tid INT PRIMARY KEY, -- 学生编号\t`name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,\tclass_id INT, -- 学生所在班级的编号\n\n– 下面指定外键关系\n1FOREIGN KEY(class_id) REFERENCES my_class(id));\n\n– 测试数据\n123456INSERT INTO my_class VALUES(100,&#x27;java&#x27;),(200,&#x27;web&#x27;);SELECT * FROM my_class;INSERT INTO my_stu VALUES(1,&#x27;tom&#x27;,100);INSERT INTO my_stu VALUES(2,&#x27;jack&#x27;,200);INSERT INTO my_stu VALUES(3,&#x27;mary&#x27;,300); -- 失败，因为300号班级不存在INSERT INTO my_stu VALUES(4,&#x27;king&#x27;,NULL); -- 可以，外键没有写not null\n\n– 外键细节– 1.外键指向的表的字段，要求是primary key或者是unique– 2.表的存储引擎是innodb，这样的表才支持外键– 3.外键字段的类型要和主键字段的类型一致(长度可以不同)– 4.外键字段的值，必须在主键字段中出现过，或者为null(前提是外键字段允许为null)– 5.一旦建立主外键的关系，数据不能随意删除了(需要先删除外键对应数据，才能删除主键对应数据)\ncheck#演示check使用– mysql5.7目前还不支持check，只做语法校验，但是不会生效– 但在oracle,sql server这两个数据库中是真的生效\n12345CREATE TABLE t21 (\tid INT PRIMARY KEY,\t`name` VARCHAR(32),\tsex VARCHAR(6) CHECK (sex IN(&#x27;man&#x27;,&#x27;woman&#x27;)),-- 即检查插入的记录是不是这两个字符串，如果是就成功，如果不是就插入失败\tsal DOUBLE CHECK (sal&gt;1000 AND sal&lt;2000));\n\n– 添加数据\n12INSERT INTO t21 VALUES(1,&#x27;jack&#x27;,&#x27;mid&#x27;,1)-- 添加失败(mid不在检查范围内并且sal小于1000)SELECT * FROM t21;\n\n自增长#演示自增长的使用– 创建表\n12345CREATE TABLE t22 (\tid INT PRIMARY KEY AUTO_INCREMENT,\temail VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,\t`name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;);DESC t22;\n\n– 测试自增长的使用\n123INSERT INTO t22 VALUES(NULL,&#x27;tom@sohu.com&#x27;,&#x27;tom&#x27;);INSERT INTO t22 (email,`name`) VALUES(&#x27;lvy@sohu.com&#x27;,&#x27;lvy&#x27;);SELECT * FROM t22;\n\n– 自增长使用细节– 1.一般来说自增长是和primary key配合使用的– 2.自增长也可以单独使用(但是需要配合一个unique)– 3.自增长修饰的字段为整数型的(虽然小数也可以但是非常非常少这样使用)– 4.自增长默认从1开始，你也可以通过如下命令修改– \talter table 表名 auto_increment&#x3D;xxx;\n12ALTER TABLE t22 AUTO_INCREMENT=10;INSERT INTO t22 VALUES(NULL,&#x27;jack@sohu.com&#x27;,&#x27;jack&#x27;);\n\n– 5.如果你添加数据时，给自增长字段(列)指定的有值，则以指定的值为准– 6.一般来说，如果指定了自增长，就按照自增长的规则来添加数据，不要自己指定数值&#x2F;*\t同时自增长会从指定的值开始,    比如之前自增长到10，而你添加数据时，    指定了100给自增长字段，    那么自增长会从10直接跳到100重新开始自增长*&#x2F;\n1INSERT INTO t22 VALUES(100,&#x27;brck@sohu.com&#x27;,&#x27;brck&#x27;);\n\nMySql索引索引优化速度及索引原理– 索引的原理– 没用索引为什么查询海量数据会慢？因为是全表扫描– 使用索引为什么查询海量数据会快？因为形成一个索引的数据结构，比如二叉树– 使用索引的代价– 1.磁盘占用空间变大– 2.对dml(update,delete,insert)语句的执行效率产生影响，变慢\n索引的类型– 1.主键索引，主键自动的为主索引(类型Primary Key)– 2.唯一索引(UNIQUE)– 3.普通索引(INDEX)– 4.全文索引(FULLTEXT)[适用于MylSAM]\nmysql的索引的使用– 创建索引\n123CREATE TABLE t23 (\tid INT,\t`name` VARCHAR(32));\n\n– 查询表是否有索引\n1SHOW INDEXES FROM t23;\n\n– 添加索引– 添加唯一索引\n1CREATE UNIQUE INDEX id_index ON t23 (id);\n\n– 添加普通索引方法1\n1CREATE INDEX id_index ON t23 (id);\n\n– 添加普通索引方法2\n1ALTER TABLE t23 ADD INDEX id_index (id);\n\n– 如何选择索引类型– 如果某列的值，是不会重复的，则优先考虑使用unique索引，否则使用普通索引\n– 添加主键索引\n12345CREATE TABLE t24 (\tid INT,\t`name` VARCHAR(32));ALTER TABLE t24 ADD PRIMARY KEY (id);SHOW INDEX FROM t24;\n\n– 删除索引\n1DROP INDEX id_index ON t23;\n\n– 删除主键索引\n1ALTER TABLE t24 DROP PRIMARY KEY;\n\n– 修改索引– 先删除，在添加新的索引\n– 查询索引– 方式1SHOW INDEX FROM t23;– 方式2SHOW INDEXES FROM t23;– 方式3SHOW KEYS FROM t23;– 方式4DESC t23\n创建索引规则– 哪些列适合使用索引– 1.较频繁的作为查询条件字段应该创建索引– 2.唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件– 3.更新非常频繁的字段不适合创建索引– 4.不会出现在where子句中字段不该创建索引\nMySql事务什么是事务及事务操作？– 事务用于保证数据的一致性，它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败– 演示mysql数据库控制台事务的几个重要操作– start transaction  开始一个事务– savepoint  设置保存点– rollback to  回退事务– rollback  回退全部事务– commit  提交事务，所有的操作生效，不能回退\n– 1.创建一张表\n123CREATE TABLE t25 (\tid INT,\t`name` VARCHAR(32));\n\n– 2.开始事务\n1START TRANSACTION\n\n– 3.设置保存点\n1SAVEPOINT a\n\n– 执行dml操作\n12INSERT INTO t25 VALUES(100,&#x27;tom&#x27;);SELECT * FROM t25;\n\n– 4.设置保存点\n1SAVEPOINT b\n\n– 执行dml操作\n1INSERT INTO t25 VALUES(200,&#x27;jack&#x27;);\n\n– 回退到b\n1ROLLBACK TO b\n\n– 回退到a\n1ROLLBACK TO a\n\n– 如果这样，表示直接回退到事务开始的状态\n1ROLLBACK\n\n– 提交事务\n1COMMIT\n\n事务注意细节– 讨论 事务细节– 1.如果不开始事务，在默认情况下，dml操作是自动提交的，不能回滚\n12INSERT INTO t25 VALUES(300,&#x27;mary&#x27;);SELECT * FROM t25;\n\n– 2.如果开始一个事务，你没有创建保存点，你可以执行rollback– 默认就是回退到事务开始的状态\n1234START TRANSACTIONINSERT INTO t25 VALUES(400,&#x27;king&#x27;);INSERT INTO t25 VALUES(500,&#x27;scott&#x27;);ROLLBACK\n\n– 3.你也可以在这个事务中(还没有提交时)，创建多个保存点– 4.你可以在事务没有提交前，选择回退到哪个保存点– 5.InnoDB存储引擎支持事务，MyISAM不支持– 6.开始一个事务 start transaction 或者 set autocommit&#x3D;off;\nMySql事务隔离级别4种隔离级别\n\n\n设置隔离#事务隔离级别介绍– 1.多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作– 以保证各个连接在获取数据时的准确性– 2.如果不考虑隔离性，可能会引发如下问题：– 脏读：当一个事务读取另一个事务尚未提交的修改时，产生脏读– 不可重复读：同一查询在同一事务中多次进行，由于其他提交事务所做的– 修改或删除，每次返回不同的结果集，此时发生不可重复读– 幻读：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作– 每次返回不同的结果集，此时发生幻读\n#演示mysql的事务隔离级别– 1.开了两个mysql的控制台– 2.查看当前mysql的隔离级别\n1SELECT @@tx_isolation;\n\n123456mysql&gt; SELECT @@tx_isolation;+-----------------+| @@tx_isolation  |+-----------------+| REPEATABLE-READ |+-----------------+\n\n– 3.把其中一个控制台的隔离级别设置 Read uncommitted\n1SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n– 4.创建表\n1234CREATE TABLE `account` (\tid INT,\t`name` VARCHAR(32),\tmoney INT);\n\n– 查看当前会话隔离级别\n1SELECT @@tx_isolation;\n\n– 查看系统当前隔离级别\n1SELECT @@global.tx_isolation;\n\n– 设置当前会话隔离级别\n1SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n– 设置系统当前隔离级别\n1SET GLOBAL TRANSACTION ISOLATION LEVE\n\nMySql表类型与存储引擎表类型和存储引擎\n\n\n– 查看所有存储引擎\n1SHOW ENGINES\n\n– innodb 存储引擎– 1.支持事务 2.支持外键 3.支持行级锁\n– myisam 存储引擎– 1.添加数据快 2.不支持外键和事务 3.支持表级锁\n12345678CREATE TABLE t26 (\tid INT,\t`name` VARCHAR(32)) ENGINE MYISAMSTART TRANSACTIONSAVEPOINT aINSERT INTO t26 VALUES(1,&#x27;jack&#x27;);SELECT * FROM t26;ROLLBACK TO a\n\n– memory 存储引擎– 1.数据存储在内存中(关闭了MySql服务，数据丢失，但是表结构还在) 2.执行速度很快(没有IO读写) 3.默认支持索引(hash表)\n12345CREATE TABLE t27 (\tid INT,\t`name` VARCHAR(32)) ENGINE MEMORYINSERT INTO t27 VALUES(1,&#x27;jack&#x27;),(2,&#x27;tom&#x27;),(3,&#x27;mery&#x27;);SELECT * FROM t27;\n\n– 指令修改存储引擎\n1ALTER TABLE `t27` ENGINE = INNODB;\n\n如何选择表的存储引擎\n视图视图原理\n\n– 1.视图是根据基表(可以是多个基表)来创建的，视图是虚拟的表– 2.视图也有列，数据来自基表– 3.通过视图可以修改基表的数据– 4.基表的改变，也会影响到视图的数据\n视图的使用– 创建一个视图emp_view01，只能查询emp表的(empno,ename,job和deptno)信息– 创建视图\n123CREATE VIEW emp_view01\tAS\tSELECT empno,ename,job,deptno FROM emp;\n\n– 查看视图\n1234DESC emp_view01;SELECT * FROM emp_view01;SELECT empno,job FROM emp_view01;SELECT sa1 FROM emp_view01; -- Unknown column &#x27;sa1&#x27; in &#x27;field list&#x27;\n\n– 查看创建视图的指令\n1SHOW CREATE VIEW emp_view01;\n\n– 删除视图\n1DROP VIEW emp_view01;\n\n– 视图细节讨论– 1.创建视图后，到数据库去看，对应视图只有一个视图结构文件(形式：视图名.frm)，不会有数据文件(视图名.ibd)– 2.视图的数据变化会影响到基表，基表的数据变化也会影响到视图(insert,update,delete)– 修改视图\n12345UPDATE emp_view01\tSET job=&#x27;MANAGER&#x27;\tWHERE empno=7369;SELECT * FROM emp_view01; -- 查询视图SELECT * FROM emp; -- 查询基表\n\n– 修改基表，也会影响到视图\n123UPDATE emp\tSET job=&#x27;SALESMAN&#x27;\tWHERE empno=7369;\n\n– 3.视图中可以再使用视图，数据依然来自基表，比如从emp_view01这个视图中选出empno和ename做新视图\n123456DESC emp_view01;CREATE VIEW emp_view02\tAS\tSELECT empno,ename FROM emp_view01;SELECT * FROM emp_view02;\n\n– 视图练习– 针对emp，dept和salgrade三张表，创建一个视图emp_view03– 可以显示雇员编号，雇员名，雇员部门名称和薪水级别[即使用三张表，创建一个视图]&#x2F;*    分析：使用三表联合查询，得到结果    将得到的结果，构建成视图*&#x2F;\n1234567CREATE VIEW emp_view03\tASSELECT empno,ename,dname,grade\tFROM emp,dept,salgrade\tWHERE emp.deptno=dept.deptno AND \t(sa1 BETWEEN losal AND hisal)SELECT * FROM emp_view03\n\nMySql管理MySql用户管理– MySql用户的管理– 原因：当我们做项目开发时，可以根据不同的开发人员，赋给他相应的MySql操作权限– 所以，MySql数据库管理人员(root)，根据需要创建不同的用户，赋给相应的权限，供人员使用\n– 1.创建新的用户– 解读(1) ‘lby‘@’localhost’表示用户的完整信息，’lby’用户名，’localhost’登录的IP– (2) 123456表示密码，但是注意，存放到mysql.user表时，是password(‘123456’)加密后的密码\n1CREATE USER &#x27;lby&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;\n\n– 2.删除用户\n1DROP USER &#x27;lby&#x27;@&#x27;localhost&#x27;\n\n– 3.修改自己的密码\n1SET PASSWORD=PASSWORD(&#x27;abcdef&#x27;)\n\n– 4.修改其他人的密码，需要权限(root用户权限高，可以修改其他用户密码)\n1SET PASSWORD FOR &#x27;lby&#x27;@&#x27;localhost&#x27;=PASSWORD(&#x27;123456&#x27;)\n\n\nMySql权限管理\n\n– 演示用户权限的管理– 1.创建用户 libai 密码 123，从本地登录\n1CREATE USER &#x27;libai&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;\n\n– 使用root用户创建testdb，表news\n1234CREATE DATABASE testdbCREATE TABLE news (\tid INT,\tcontent VARCHAR(32));\n\n– 添加一条测试数据\n12INSERT INTO news VALUES(100,&#x27;广州新闻&#x27;)SELECT * FROM news\n\n– 给libai分配查看news表和添加news的权限\n123GRANT SELECT,INSERT\tON testdb.news\tTO &#x27;libai&#x27;@&#x27;localhost&#x27;\n\n– 给libai增加权限\n123GRANT UPDATE\tON testdb.news\tTO &#x27;libai&#x27;@&#x27;localhost&#x27;\n\n– 修改libai的密码为abc\n1SET PASSWORD FOR &#x27;libai&#x27;@&#x27;localhost&#x27;=PASSWORD(&#x27;abc&#x27;)\n\n– 回收libai用户在testdb.news表的所有权限\n12REVOKE SELECT,UPDATE,INSERT ON testdb.news FROM &#x27;libai&#x27;@&#x27;localhost&#x27;REVOKE ALL ON testdb.news FROM &#x27;libai&#x27;@&#x27;localhost&#x27;\n\n– 如果权限没有生效，可以执行下面的指令\n1FLUSH PRIVILEGES\n\nMySql用户管理细节#说明用户管理的细节– 在创建用户的时候，如果不指定Host，则为%，%表示所有IP都有连接权限– create user xxx;\n12CREATE USER jackSELECT `host`,`user` FROM mysql.user\n\n– 你也可以这样子指定– *create user ‘xxx‘@’192.168.1.%’表示xxx用户在192.168.1.的ip可以登录mysql\n1CREATE USER &#x27;smith&#x27;@&#x27;192.168.1.%&#x27;\n\n– 在删除用户时，如果host不是%，需要明确指定’用户‘@’host值’\n12DROP USER jack -- 默认就是drop user &#x27;jack&#x27;@&#x27;%&#x27;DROP USER &#x27;smith&#x27;@&#x27;192.168.1.%&#x27;\n\n","slug":"MySqlNote","date":"2022-12-19T07:36:00.000Z","categories_index":"分享","tags_index":"","author_index":"Aurora"},{"id":"ded61a19544260ae868539b13c770d4b","title":"Java-3","content":"4.String1.概述String是引用数据类型，在java中用于存放字符串\n2.特点-字符串不可变，它们的值在创建后不能被更改\n-虽然String的值是不可变的，但是它们可以被共享\n-字符串效果上相当于字符数组(char[])，但是底层原理是字节数组(byte[])\n3.构造方法\n12345678910111213141516171819class StringDemo &#123;    public static void main(String[] args) &#123;        //public String()，创建一个空白字符串对象，不含有任何内容        String s1=new String();        System.out.println(&quot;s1=&quot;+s1); //输出结果为 s1=        //public String(char[] arr),根据字符数组的内容，来创建字符串对象        char[] arr=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;        String s2=new String(arr);        System.out.println(&quot;s2=&quot;+s2);//输出结果为 s2=abc        //public String(bytr[] arr1)，根据字节数组的内容，来创建字符串对象        byte[] arr1=&#123;97,98,99&#125;;//97=a,98=b,99=c        String s3=new String(arr1);        System.out.println(&quot;s3=&quot;+s3);//输出结果为 s3=abc        //String s=&quot;abc&quot;;直接赋值的方式创建字符串对象，内容就是abc        String s4=&quot;abc&quot;;        System.out.println(&quot;s4=&quot;+s4);    &#125;&#125;\n4.String对象的特点4.1.通过new创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同，但是地域值不同\n4.2.以””方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM都只会建立一个String对象，并在字符串池种维护\n4.3.存储分析\n\n\n\n\n5.字符串的比较使用**&#x3D;&#x3D;**做比较\n-基本类型：比较的是数据值是否相同\n-引用类型：比较的是地址值是否相同\n字符串是对象，它比较内容是否相同，是通过一个方法来实现的，这个方法叫：equals()\n-public boolean equals(Object anObject)：将此字符串与指定对象进行比较，由于我们比较的是对象，所以参数直接传递一个字符串\n6.案例6.1遍历字符串\n12345678910111213141516import java.util.Scanner;public class Tttast &#123;    public static void main(String[] args) &#123;        Scanner sc=new Scanner(System.in);        String s=sc.next();        int len=s.length();        char[] arr=new char[len];        for(int i=0;i&lt;len;i++)&#123;            arr[i]=s.charAt(i);            System.out.print(arr[i]+&quot; &quot;);        &#125;    &#125;&#125;输入14567运行结果为1 4 5 6 7\n6.2统计字符次数\n12345678910111213141516171819202122232425import java.util.Scanner;public class StringTest &#123;    public static void main(String[] args) &#123;        Scanner sc=new Scanner(System.in);        String s=sc.next();        int big=0,small=0,num=0;        for(int i=0;i&lt;s.length();i++)&#123;            char ch=s.charAt(i);            if(ch&gt;=&#x27;A&#x27;&amp;&amp;ch&lt;=&#x27;Z&#x27;)&#123;                big++;            &#125;else if(ch&gt;=&#x27;a&#x27;&amp;&amp;ch&lt;=&#x27;z&#x27;)&#123;                small++;            &#125;else if(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;)&#123;                num++;            &#125;        &#125;        System.out.println(&quot;big:&quot;+big);        System.out.println(&quot;small:&quot;+small);        System.out.println(&quot;num:&quot;+num);    &#125;&#125;输入：AA2022libo输出：big：2     small：4     num：4\n6.3拼接字符串\n12345678910111213141516171819202122class StringTest01 &#123;    public static void main(String[] args) &#123;        int[] arr=&#123;1,2,3&#125;;        String s=Arr(arr);        System.out.println(s);    &#125;    public static String Arr(int[] arr1)&#123;        String s=&quot;&quot;;        s+=&quot;[&quot;;        for(int i=0;i&lt;arr1.length;i++)&#123;            if(i==arr1.length-1)&#123;                s+=arr1[i];            &#125;else&#123;                s+=arr1[i];                s+=&quot;, &quot;;            &#125;        &#125;        s+=&quot;]&quot;;        return s;    &#125;&#125;输出:[1, 2, 3]\n6.4字符串反转\n1234567891011121314151617181920212223242526class StringTest02 &#123;    public static void main(String[] args) &#123;        Scanner sc=new Scanner(System.in);        String s=sc.next();        String sss=Arr(s);        System.out.println(sss);    &#125;    public static String Arr(String ss)&#123;        char[] arr=new char[ss.length()];        String s=&quot;&quot;;        s+=&quot;[&quot;;        for(int i=ss.length()-1,j=0;i&gt;=0;i--,j++)&#123;            arr[j] = ss.charAt(i);            if(i==0)&#123;                s +=arr[j];            &#125;else &#123;                s += arr[j];                s += &quot;, &quot;;            &#125;        &#125;        s+=&quot;]&quot;;        return s;    &#125;&#125;输入：abcde输出：[e, d, c, d, a]\n7.通过帮助文档查看String中的方法即API查看\n\n8.常用方法1.0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748490.boolean\tequals(Object anObject)将此字符串与指定对象进行比较。 区分大小写，判断内容是否相等1.boolean\tequalsIgnoreCase(String anotherString)将此 String与其他 String比较，忽略案例注意事项。忽略大小写的判断内容是否相等2.int\tindexOf(int ch)返回指定字符第一次出现的字符串内的索引。索引从0开始，如果找不到，返回-13.int\tlastIndexOf(int ch)返回指定字符的最后一次出现的字符串中的索引。索引从0开始，如果找不到，返回-14.String\tsubstring(int beginIndex)返回一个字符串，该字符串是此字符串的子字符串。即截取指定范围的字符串5.String\tsubstring(int beginIndex, int endIndex)返回一个字符串，该字符串是此字符串的子字符串。即截取指定范围的字符串6.String\ttrim()返回一个字符串，其值为此字符串，并删除任何前导和尾随空格。即删除前后空格public class StringDemo01 &#123;    public static void main(String[] args) &#123;//        boolean  equals(Object anObject)区分大小写，判断内容是否相等        String s1=&quot;hello&quot;;        String s2=&quot;Hello&quot;;        System.out.println(s1.equals(s2));//false//        boolean  equalsIgnoreCase(String anotherString)忽略大小写的判断内容是否相等        String s3=&quot;hello&quot;;        String s4=&quot;Hello&quot;;        System.out.println(s3.equalsIgnoreCase(s4));//true//        int  indexOf(int ch)返回指定字符第一次出现的字符串内的索引。索引从0开始，如果找不到，返回-1        String s5=&quot;hello@java@li&quot;;        int index=s5.indexOf(&#x27;@&#x27;);        int index2=s5.indexOf(&#x27;$&#x27;);        int index5=s5.indexOf(&quot;java&quot;);        System.out.println(index+&quot; &quot;+index2+&quot; &quot;+index5);//5 -1 6//        int  lastIndexOf(int ch)返回指定字符的最后一次出现的字符串中的索引。索引从0开始，如果找不到，返回-1        String s6=&quot;hello@java@li&quot;;        int index3=s6.lastIndexOf(&#x27;@&#x27;);        int index4=s6.lastIndexOf(&#x27;$&#x27;);        int index6=s6.lastIndexOf(&quot;java&quot;);        System.out.println(index3+&quot; &quot;+index4+&quot; &quot;+index6);//10 -1 6//          String substring(int beginIndex)返回一个字符串，该字符串是此字符串的子字符串。即截取指定范围的字符串        String s7=&quot;hello,李白&quot;;//        s7.substring(6)表示从索引6开始截取后面所有的内容        System.out.println(s7.substring(6));//李白//        String   substring(int beginIndex, int endIndex返回一个字符串，该字符串是此字符串的子字符串。即截取指定范围的字符串//        s7.substring(0,5)表示从索引0开始截取，截取到索引5-1=4这个位置        System.out.println(s7.substring(0,5));//hello//         String  trim()返回一个字符串，其值为此字符串，并删除任何前导和尾随空格。即删除前后空格        String s8=&quot;   hello world   &quot;;        System.out.println(s8.trim());//hello world    &#125;&#125;\n2.0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960610.String\treplace(char oldChar, char newChar)返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar 。即替换字符串中的字符1.int\tcompareTo(String anotherString)按字典顺序比较两个字符串。即比较两个字符串的大小2.char[]\ttoCharArray()将此字符串转换为新的字符数组。即把字符串转换为字符数组3.String\tconcat(String str)将指定的字符串连接到该字符串的末尾。 4.String\ttoLowerCase()将所有在此字符 String使用默认语言环境的规则，以小写。 5.String\ttoUpperCase()将所有在此字符 String使用默认语言环境的规则大写。 6.String[]\tsplit(String regex)将此字符串分割为给定的 regular expression的匹配。即分割字符串，对于某些分割字符，需要转义，比如|\\\\等public class StringDemo02 &#123;    public static void main(String[] args) &#123;//        String   replace(char oldChar, char newChar)返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar 。即替换字符串中的字符    String s=&quot;hello world&quot;;//        s.replace()方法执行后，返回的结果才是替换过的//        对s本身没有任何影响        String ss=s.replace(&quot;hello&quot;,&quot;Hello&quot;);        System.out.println(ss);//Hello world        System.out.println(s);//hello world//        除非用s本身来接收替换的结果，s才会有变化        s=s.replace(&quot;hello&quot;,&quot;Hello&quot;);        System.out.println(s);//Hello world//        int  compareTo(String anotherString)按字典顺序比较两个字符串。即比较两个字符串的大小//        如果前者大，则返回正数，如果后者大，则返回负数，如果相等，则返回0        String s1=&quot;jcva&quot;;        String s2=&quot;java&quot;;        System.out.println(s1.compareTo(s2));//返回值是&#x27;c&#x27;-&#x27;a&#x27;=2的值//      char[] toCharArray()将此字符串转换为新的字符数组。即把字符串转换为字符数组        String s3=&quot;happy&quot;;        char[] arr=s3.toCharArray();        for(int i=0;i&lt;s3.length();i++) &#123;            System.out.print(arr[i] + &quot; &quot;);//h a p p y        &#125;//       String    concat(String str)将指定的字符串连接到该字符串的末尾。            String s4=&quot;李白&quot;;           s4 = s4.concat(&quot;爱&quot;).concat(&quot;写诗&quot;).concat(&quot;和喝酒&quot;);            System.out.println(s4);//李白爱写诗和喝酒//        String toLowerCase()将所有在此字符 String使用默认语言环境的规则，以小写。        String s5=&quot;Hello&quot;;        System.out.println(s5.toLowerCase());//hello//        String   toUpperCase()将所有在此字符 String使用默认语言环境的规则大写。        System.out.println(s5.toUpperCase());//HELLO//        String[] split(String regex)将此字符串分割为给定的 regular expression的匹配。即分割字符串，对于某些分割字符，需要转义，比如|\\\\等       String s6=&quot;锄禾日当午，汗滴禾下土，谁知盘中餐，粒粒皆辛苦&quot;;       String[] s7=s6.split(&quot;，&quot;);        System.out.println(s7[0]);//锄禾日当午       for(String poem:s7)&#123;           System.out.print(poem+&quot; &quot;);//锄禾日当午 汗滴禾下土 谁知盘中餐 粒粒皆辛苦       &#125;       String s8=&quot;C:\\\\Tast\\\\java&quot;;       String[] s9=s8.split(&quot;\\\\\\\\&quot;);            for(String luji:s9)&#123;                System.out.print(luji+&quot; &quot;);//C: Tast java            &#125;        &#125;        &#125;\n5.StringBuilder1.概述\n-StringBuilder是一个可变的字符串类，我们可以把它看成是一个容器\n-这里的可变指的是StringBuilder对象中的内容是可变的\n2.构造方法\n123456789101112class StringBuilder01 &#123;    public static void main(String[] args) &#123;//public StringBuilder(),创建一个空白的字符串对象，不含有任何内容        StringBuilder s1=new StringBuilder();     System.out.println(&quot;s1:&quot;+s1+&quot; &quot;+s1.length());//public StringBuilder(String str),根据字符串的内容，来创建可变字符串对象        StringBuilder s2=new StringBuilder(&quot;hello&quot;);        System.out.println(&quot;s2:&quot;+s2+&quot; &quot;+s2.length());    &#125;&#125;输出：s1：0     s2：hello 5\n3.添加和反转方法\n1234567891011121314151617181920212223242526272829class StringBuilder02 &#123;    public static void main(String[] args) &#123;//        创建对象        StringBuilder s=new StringBuilder();/*        public StringBuilder append(任意类型);添加类型,并返回对象本身       StringBuilder s1=s.append(&quot;hello&quot;);      System.out.println(&quot;s:&quot;+s);      System.out.println(&quot;s1:&quot;+s1);      System.out.println(s==s1);      输出s：hello          s1:hello          true */   /*     s.append(&quot;hello&quot;);        s.append(&quot;world&quot;);        s.append(&quot;java&quot;);        s.append(100);        System.out.println(&quot;s:&quot;+s);       输出：helloworldjava100    */        s.append(&quot;hello&quot;).append(&quot;world&quot;).append(&quot;java&quot;).append(100);        System.out.println(&quot;s:&quot;+s);//         输出：helloworldjava100//        public StringBuilder reverse();返回相反的字符序列        s.reverse();        System.out.println(&quot;s:&quot;+s);//        输出：s:001avajdlrowolleh    &#125;&#125;\n4.StringBuilder和String相互转换4.1 StringBuilder转换为Stringpublic String toString(_)：通过toString()就可以实现把StringBuilder转换为Strng\n1234StringBuilder s=new StringBuilder();s.append(&quot;hello&quot;);String s1=s;//这个是错误的String s1=s.toString();\n4.2 String转换为StringBuilderpublic StringBuilder(String s)：通过构造方法就可以把String转换为StringBuilder\n123String s=&quot;hello&quot;;StringBuilder s1=s;//这个是错误的StringBuilder s1=new StringBuilder(s);\n5.案例5.1拼接字符串\n123456789101112131415161718192021class StringBuilder03 &#123;    public static void main(String[] args) &#123;        int[] arr=&#123;1,2,3&#125;;        String s=Arr(arr);        System.out.println(s);    &#125;    public static String Arr(int[] arr1)&#123;        StringBuilder s=new StringBuilder();        s.append(&quot;[&quot;);        for(int i=0;i&lt;arr1.length;i++)&#123;            if(i== arr1.length-1)&#123;                s.append(arr1[i]);            &#125;else&#123;                s.append(arr1[i]).append(&quot;, &quot;);            &#125;        &#125;        s.append(&quot;]&quot;);        String s1=s.toString();        return s1;    &#125;&#125;\n5.2字符串反转\n&#96;&#96;&#96;plainclass StringBuilder04 {    public static void main(String[] args) {        Scanner sc&#x3D;new Scanner(System.in);        String ss&#x3D;sc.next();        String sss&#x3D;Arr(ss);        System.out.println(sss);    }    public static String Arr(String s){&#x2F;&#x2F;        StringBuilder s1&#x3D;new StringBuilder(s);&#x2F;&#x2F;        s1.reverse();&#x2F;&#x2F;        String s3&#x3D;s1.toString();&#x2F;&#x2F;        return s3;      return new StringBuilder(s).reverse().toString();    }}输入：1234输出：4321\n","slug":"java-4","date":"2022-11-26T05:00:00.000Z","categories_index":"分享","tags_index":"","author_index":"Aurora"},{"id":"eb5f65a0fd8d3397e178ed169f824687","title":"Java-2","content":"3.类与对象1.定义类：类是对现实生活中一类具有共同属性和行为事物的抽象\n对象：万物皆对象，客观存在的事物皆为对象，每个对象的每个属性都拥有特定的值\n\n2.类与对象的关系类是对象的抽象\n对象是类的实体\n\n3.面向对象即面向一个具体的事物的过程\n4.对象的使用\n1234567891011121314151617181920212223242526public class StudentDemo &#123;    public static void main(String[] args) &#123;        Student s = new Student();        s.age = 18;        s.name = &quot;李白&quot;;        s.score = 100.0;        System.out.println(s.age+&quot; &quot;+s.score+&quot; &quot;+s.name);        s.study();        s.dohomework();    &#125;&#125; class Student &#123;    String name;    int age;    double score;    public void study() &#123;        System.out.println(&quot;好好学习，天天向上&quot;);    &#125;    public void dohomework() &#123;        System.out.println(&quot;键盘敲乱，月薪过万&quot;);    &#125;&#125;\n运行结果为\n12318 100.0 李白好好学习，天天向上键盘敲乱，月薪过万\n5.对象内存图5.1单个对象\n\n\n\n\n\n5.2多个对象\n\n\n\n\n\n5.3多个对象指向相同\n\n\n\n\n6.成员变量和局部变量6.1介绍成员变量：类中方法外的变量\nString name;         int age;\n局部变量：方法中的变量\nint i&#x3D;0;           int j&#x3D;0;\n\n6.2区别\n7.封装7.1private关键字-是一个权限修饰符\n-可以修饰成员(成员变量和成员方法)\n-作用是保护成员不被别的类使用，被private修饰的成员只在本类中访问\n针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作\n-提供”get变量名()“方法，用于获取成员变量的值，方法用public修饰\n-提供”set变量名(参数)“方法，用于设置成员变量的值，方法用public修饰\n7.2this关键字this修饰的变量用于指代成员变量\n-方法的形参如果与成员变量同名，不带this修饰的变量值指的是形参，而不是成员变量\n-方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量\n\n7.3this内存原理\n\n\n\n7.4封装1.概述-是面向对象的三大特征之一(封装，继承，多态)\n-是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的\n2.原则-将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问\n-成员变量private，提供对应的gextXxx()方法\n3.好处-通过方法来控制成员变量的操作，提高了代码的安全性\n-把代码用方法进行封装，提高了代码的复用性\n8.构造方法8.1概述构造方法是一种特殊的方法\n作用：创建对象\n\n8.2注意事项1.构造方法的创建\n-如果没有定义构造方法，系统将给出一个默认的无参数构造方法\n-如果定义了构造方法，系统将不再提供默认的构造方法\n2.构造方法的重载\n-如果自定义了带参数构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法\n3.推荐的使用方式\n-无论是否使用，都手工书写无参数构造方法\n8.3标准类的使用public class StudentDemo &#123;\n    public static void main(String[] args) &#123;\n        Student s = new Student();\n        s.setName(&quot;李白&quot;);\n        s.setAge(18);\n       Student s1=new Student(&quot;李白&quot;,19);\n        s1.show();\n    &#125;\n&#125;\n    class Student &#123;\n    private String name;\n    private int age;\n    public Student()&#123;\n        System.out.println(&quot;无参数构造方法&quot;);\n    &#125;\n    public Student(String name,int age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n    public void setName(String name)&#123;\n        this.name=name;\n     &#125;\n     public String getName()&#123;\n        return name;\n     &#125;\n     public void setAge(int age)&#123;\n        this.age=age;\n     &#125;\n     public int getAge()&#123;\n        return age;\n     &#125;\n     public void show()&#123;\n        System.out.println(name+&quot; &quot;+age);\n     &#125;\n    &#125;\n\n","slug":"java-3","date":"2022-11-26T04:00:00.000Z","categories_index":"分享","tags_index":"","author_index":"Aurora"},{"id":"caa3a045de76bb58da4a9706c357cf42","title":"Java-1","content":"1.数组1.介绍  数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。\n\n即：数组就是一组数据。\n123456789101112131415/*1.int[] arr 表示是int类型的数组，数组名是arr2.&#123;1，2，3，4，5&#125;表示数组的值/元素，依次表示数组的第几个元素3.可以通过数组名加索引/下标来使用数组中的元素，即arr[索引/下标]4.索引/下标是从0开始的，开始编号的第一个元素就是arr[0]5.第二个元素就为arr[1],依此类推，最后的元素为arr[arr.length-1]*/public class Matrix1 &#123;    public static void main(String[] args) &#123;    int[] arr=&#123;1,2,3,4,5&#125;;//通过for循环来使用元素    for(int i=0;i&lt;arr.length;i++)&#123;//通过数组名.length来获取数组长度        System.out.print(arr[i]+&quot; &quot;);      &#125;  &#125;&#125;\n2.使用方式1.使用方式1-动态初始化  数组的定义：\n\n  数据类型 数组名[]=new 数据类型[大小];\n\n  int a[]=new int[5];//创建了一个数组，名字为a，存放5个int类型数据\n\n1234class Array01 &#123;   public static void main(String[] args) &#123;&#125;    int[] arr=new int[5];&#125;\n2.使用方式2-动态初始化   先声明数组：\n\n   语法：数据类型 数据名[]; or 数据类型[] 数据名；\n\n1int a[]; or ine[] a;\n   创建数组：\n   语法：数组名=new 数据类型[大小];\n\n1a = new int[5];\n演示：\n12345class Array01 &#123;   public static void main(String[] args) &#123;&#125;    int[] arr；    arr = new int[5];&#125;\n3.使用方式3-静态初始化初始化数组：\n语法：数据类型[] 数组名&#x3D;{元素值,元素值……};\n123int[] arr=&#123;1,2,3,4,5&#125;;//相当于：int[] a=new int[5];a[0]=1;a[1]=2;a[2]=3;a[3]=4;a[4]=5;\n演示：\n1234class Array01 &#123;   public static void main(String[] args) &#123;&#125;    int[] arr=&#123;1，2，3，4，5&#125;；&#125;\n3.注意事项   1.数组是多个相同类型的组合，实现对这些数据的统一管理\n   2.数组中的元素可以是任何数据类型，包括基本类型和引用类型，但不能混用\n1int[] arr=&#123;1,2.2,3,&quot;哈哈&quot;&#125;其中&quot;哈哈&quot;为字符串类型，其他为int类型，如果这样子写，会报错，类型不兼容\n   3.数组创建后，如果没有赋值，有默认值：int,short,byte,long皆为0，float和double为0.0，char为\\u0000，boolean为false，String为null   4.使用数组的步骤：声明数组并开辟内存空间–给数组中的元素赋值–使用数组\n   5.数组的索引从0开始\n   6.数组的索引必须在有效范围内使用，不然会出现以下保错\n1ArrayIndexOutOfBoundsException，即索引超过了有效范围内\n     7.数组属于引用类型，数组型数据是对象(object)\n\n4.数组赋值机制1234567891011121314151617181920212223public class Array02 &#123;  public static void main(String[] args) &#123;  //基本数据类型赋值，赋值方式为值复制/拷贝  //N2的变化不会影响n1的值  int n1=10;  int N2=n1;    N2=80;  System.out.println(n1);//10  System.out.println(N2);//80  //数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递//传递的是一个地址，arr2的变化会影响到arr1  int[] arr1=&#123;1,2,3&#125;;  int[] arr2=arr1;//把arr1的值赋给arr2  arr2[0]=10;  //看看arr1的值  for(int i=0;i&lt;arr1.length;i++)&#123;    System.out.println(arr[i]);    //输出结果为10，2，3  &#125;  &#125;&#125;\n5.数组拷贝 即将数组arr的元素拷贝到arr1数组，并且要求开辟一个新的独立的空间，大小与arr相同\n1234567891011121314class Array03 &#123;   public static void main(String[] args) &#123;       int[] arr=&#123;1,2,3&#125;;       int[] arr1=new int[3];       for(int i=0;i&lt;arr.length;i++)&#123;           arr1[i]=arr[i];           System.out.print(arr1[i]+&quot; &quot;);       &#125; //这时你再改变arr1元素的值，不会影响到arr的元素的值       arr1[0]=10;       System.out.print(arr1[0]+&quot; &quot;+arr[0]);//输出结果为10 1   &#125;&#125;//因为arr1在栈中生成地址指向的堆内存空间和arr在栈中生成地址指向的堆内存空间不同\n6.数组翻转  即将用先数组的元素排序逆过来，如{1,2,3,4,5,6}翻转后成{6,5,4,3,2,1}\n思路-112345678910111213141516171819202122//通过找规律翻转class Array04 &#123;    public static void main(String[] args) &#123;        int[] arr=&#123;11,22,33,44,55,66&#125;;/*把arr[0]和arr[5]交换，获得&#123;66,22,33,44,55,11&#125;  再把arr[1]和arr[4]交换，获得&#123;66,55,33,44,22,11&#125;  最后把arr[2]和arr[3]交换，获得&#123;66,55,44,33,22,11&#125;  一共要进行3次交换=arr.length/2，每次交换，对应的索引为arr[i]和arr[arr.length-1-i]  先创建一个临时变量用来存放arr[i]或arr[arr.length-i-1] */        int temp=0;        int chang=arr.length;        for(int i=0;i&lt;chang/2;i++)&#123;            temp=arr[i];            arr[i]=arr[arr.length-1-i];            arr[arr.length-1-i]=temp;        &#125;        for(int i=0;i&lt;chang;i++)&#123;            System.out.print(arr[i]+&quot; &quot;);        &#125;    &#125; &#125;\n 运行结果为\n166 55 44 33 22 11\n思路-2123456789101112131415161718//通过逆序翻转方式class Array05 &#123;    public static void main(String[] args) &#123;        int[] arr=&#123;11,22,33,44,55,66&#125;;/*先创建一个新的数组arr2，大小与arr。length相同  逆序遍历arr，将每个元素拷贝到arr2中  再将arr指向arr2，此时arr原先的数据空间就没有变量运用，会被JVM当作垃圾处理掉 */        int[] arr2=new int[arr.length];        for(int i=0,j=arr.length-1;i&lt;arr.length;i++,j--)&#123;            arr2[i]=arr[j];        &#125;        arr=arr2;        for(int i=0;i&lt;arr.length;i++)&#123;            System.out.print(arr[i]+&quot; &quot;);        &#125;    &#125; &#125;\n 运行结果为\n166 55 44 33 22 11\n7.数组扩容  即给一个定义好的数组增加元素(动态添加)，两个案例：\n案例-112345678910111213141516171819202122232425class ArrayAdd &#123;        public static void main(String[] args) &#123;/*要求:实现动态的给数组添加元素效果，实现对数组扩容  1.原始数组使用静态分配int[] arr=&#123;1,2,3&#125;  2.增加的元素4，直接放在数组的最后arr=&#123;1,2,3,4&#125;    思路分析  1.定义初始数组int[] arr=&#123;1,2,3&#125;  2.定义一个新的数组int[] arr2=new int[arr.length+1]  3.遍历arr数组，依次将arr的元素拷贝到arr2数组  4.再将4赋值给arr2[arr.length]=4或arr2[arr2.length-1]  5.最后将arr指向arr2，实现arr的扩容，原来arr的数组被销毁 */            int[] arr=&#123;1,2,3&#125;;            int[] arr2=new int[arr.length+1];            for(int i=0;i&lt;arr.length;i++) &#123;                arr2[i] = arr[i];            &#125;            for(int i=0;i&lt; arr2.length;i++)&#123;                arr2[arr2.length-1]=addnumber;                arr=arr2;                System.out.print(arr[i]+&quot; &quot;);            &#125;        &#125;    &#125;\n 运行结果为\n\n11 2 3 4\n案例-2123456789101112131415161718192021222324252627282930313233343536373839import java.util.Scanner;class ArrayAdd &#123;        public static void main(String[] args) &#123;/*要求:实现动态的给数组添加元素效果，实现对数组扩容  1.原始数组使用静态分配int[] arr=&#123;1,2,3&#125;  2.增加的元素4，直接放在数组的最后arr=&#123;1,2,3,4&#125;  3.用户可以通过如下方法来决定是否继续添加，添加成功，是否继续yes/no    思路分析  1.定义初始数组int[] arr=&#123;1,2,3&#125;  2.定义一个新的数组int[] arr2=new int[arr.length+1]  3.遍历arr数组，依次将arr的元素拷贝到arr2数组  4.再将4赋值给arr2[arr.length]=4或arr2[arr2.length-1]  5.最后将arr指向arr2，实现arr的扩容，原来arr的数组被销毁  6.创建一个Scanner对象可以接受用户输入  7.因为用户什么时候退出不确定，可以使用do-while循环来控制 */            Scanner sc=new Scanner(System.in);            int[] arr=&#123;1,2,3&#125;;            do&#123;            int[] arr2=new int[arr.length+1];            for(int i=0;i&lt;arr.length;i++) &#123;                arr2[i] = arr[i];            &#125;            System.out.println(&quot;请输入你要添加的元素&quot;);            int addnumber=sc.nextInt();            for(int i=0;i&lt; arr2.length;i++)&#123;                arr2[arr2.length-1]=addnumber;                arr=arr2;                System.out.print(arr[i]+&quot; &quot;);            &#125;            System.out.println(&quot;是否继续添加&quot;);            String key=sc.next();            if(key.equals(&quot;no&quot;))            break;            &#125;while(true);            System.out.println(&quot;你退出了添加&quot;);        &#125;    &#125;\n运行结果为\n1234567891011请输入你要添加的元素41 2 3 4是否继续添加yes请输入你要添加的元素51 2 3 4 5 是否继续添加no你退出了添加\n8.数组缩减即给一个定义好的数组缩减元素\n1234567891011121314151617181920212223class ArrayReduce &#123;    public static void main(String[] args) &#123;        Scanner sc=new Scanner(System.in);        int[] arr=&#123;1,2,3,4,5&#125;;        do&#123;            int[] arr2=new int[arr.length-1];            for(int i=0;i&lt;arr.length-1;i++)&#123;                arr2[i]=arr[i];            &#125;            arr=arr2;            for(int i=0;i&lt;arr.length;i++) &#123;                System.out.print(arr[i]+&quot; &quot;);            &#125;            System.out.println(&quot;\\n是否继续缩减&quot;);            String num=sc.next();            if(num.equals(&quot;no&quot;))                break;            if(arr.length==1)//当缩减到最后一个元素时退出循环                break;        &#125;while(true);        System.out.print(&quot;你退出了缩减&quot;);    &#125;&#125;\n9.冒泡排序介绍冒泡排序(Bubble Sorting)的基本思想时：通过对待排序序列从后往前(从索引较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就像水底下的气泡一样逐渐向上冒。\n分析\n案例123456789101112131415161718192021class BubbleSort2 &#123;    public static void main(String[] args) &#123;        int[] arr=&#123;12,23,11,24,25,13&#125;;        int temp=0;//根据冒泡法的规律可以发现一个数组需要进行排序的次数会等于数组的长度-1        for(int i=0;i&lt;arr.length-1;i++)&#123;/*根据冒泡法的规律：每一次排序交换的次数会依次减少，如第一次排序交换的次数为arr.length-1,第二次排序交换的次数为arr.length-2,以此类推，到最后交换1次            for(int j=0;j&lt;arr.length-1-i;j++)&#123;                if(arr[j]&gt;arr[j+1])&#123;                    temp = arr[j];                    arr[j]=arr[j+1];                    arr[j+1]=temp;                &#125;            &#125;        &#125;        for(int i=0;i&lt;arr.length;i++)&#123;            System.out.print(arr[i]+&quot; &quot;);        &#125;    &#125;&#125;\n运行结果为\n111 12 13 23 24 25\n10.查找即在数组内查找一个指定的元素，然后输出这个元素的索引值\n12345678910111213141516class ShuZi &#123;    public static void main(String[] args) &#123;    Scanner sc=new Scanner(System.in);    int num=sc.nextInt();    int[] arr=&#123;888,666,123,-123,250,13,250,-222&#125;;    int temp=0;    for(int i=0;i&lt;arr.length;i++)&#123;        temp=i+1;        if(num==arr[i])&#123;            System.out.print(temp+&quot; &quot;);        &#125;else&#123;        &#125;    &#125;    &#125;&#125;\n2.方法1.概述\n方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集\n注意：方法必须先创建才可以使用，该过程称为方法定义\n  方法创建后并不是直接运行的，需要手动使用后才执行，该过程被称为方法调用\n2.方法定义和调用2.1方法定义2.2方法调用2.3案例123456789101112131415class MethodDemo &#123;public static void main(String[] args) &#123;    isONumber();&#125;    public static void isONumber()&#123;        int number=10;        if(number%2==0)&#123;            System.out.print(true);        &#125;else&#123;            System.out.print(false);        &#125;    &#125;&#125;//运行结果为true\n3.方法调用过程分析\n1.先执行程序主入口，进入主方法里面再往下执行，发现到isEvenNumber方法的调用，就把isEvenNumber这个方法调用出来\n2.进入到isEvenNumber方法里面后，往下执行int number&#x3D;10，再往下执行if语句判断\n3.if语句执行完会，再往下执行没有发现任何代码，方法调用就结束了\n4.带参数方法的定义和调用4.1带参数方法的定义\n4.2带参数方法的调用\n4.3案例123456789101112131415161718class MethodDemo &#123;public static void main(String[] args) &#123;//变量值的调用    isONumber(10);//变量的调用    int number=10;    isONumber(number);&#125;    public static void isONumber(int number)&#123;        if(number%2==0)&#123;            System.out.print(true);        &#125;else&#123;            System.out.print(false);        &#125;    &#125;&#125;//运行结果为true\n4.4形参和实参\n5.带返回值方法的定义和调用5.1带返回值方法的定义\n5.2带返回值方法的调用\n5.3案例123456789101112131415class MethodDemo &#123;    public static void main(String[] args) &#123;        //isONumber(10);        //true;没有意义，不输出true        boolean zhi=isONumber(10);        System.out.print(zhi);    &#125;    public static Boolean isONumber(int number)&#123;        if(number%2==0)&#123;           return true;        &#125;else&#123;            return false;        &#125;    &#125;&#125;\n6.方法的注意事项6.1方法不能嵌套定义\n6.2void表示无返回值可以省略return，也可以单独的书写return，后面不加数据\n  \n6.3方法的通用格式\n\n7.方法重载7.1方法重载概述1.方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载\n注意：多个方法在同一个类中\n        多个方法具有**相同的方法名**\n\n   多个方法的参数不相同，类型不同或者数量不同\n7.2方法重载特点1.重载仅对应方法的定义，与方法的调用无关，通用方式参照标准格式\n2.重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载\n\n8.方法的参数传递8.1基本类型对于基本数据类型的参数，形式参数的改变，不影响实际参数的值\n\n8.2引用类型对于引用类型的参数，形式参数的改变，影响实际参数的值\n\n9.递归即在方法中调用方法\n","slug":"Java-2","date":"2022-11-26T03:00:00.000Z","categories_index":"分享","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-11-25T11:55:34.263Z","categories_index":"分享","tags_index":"","author_index":"Aurora"}]